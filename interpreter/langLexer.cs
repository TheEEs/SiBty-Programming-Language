//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from langLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class langLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Print=1, If=2, ElseIF=3, Else=4, Var=5, Do=6, End=7, While=8, Next=9, 
		Continue=10, Stop=11, Break=12, Return=13, Boolean_not=14, Boolean_operator=15, 
		Bitwise_not=16, Bitwise_operators=17, Bitwise_Or=18, Hash_pair=19, Bitwise_shift=20, 
		Relational=21, Equalty=22, Additive=23, Exponent=24, Assignment=25, Multiplicative=26, 
		Square_openPathen=27, Square_closePathen=28, Hash_openPathen=29, Hash_closePathen=30, 
		OpenPathen=31, ClosePathen=32, Comma=33, Dot_comma=34, Dot=35, String=36, 
		Float=37, Hexa=38, Octal=39, Binary=40, Decimal=41, Boolean=42, Nil=43, 
		Id=44, Comments=45, Skip_NewLine=46, NewLine=47, WS=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Print", "If", "ElseIF", "Else", "Var", "Do", "End", "While", "Next", 
		"Continue", "Stop", "Break", "Return", "Boolean_not", "Boolean_operator", 
		"Bitwise_not", "Bitwise_operators", "Bitwise_Or", "Hash_pair", "Bitwise_shift", 
		"Relational", "Equalty", "Additive", "Exponent", "Assignment", "Multiplicative", 
		"Square_openPathen", "Square_closePathen", "Hash_openPathen", "Hash_closePathen", 
		"OpenPathen", "ClosePathen", "Comma", "Dot_comma", "Dot", "String", "Float", 
		"Hexa", "Octal", "Binary", "Decimal", "Boolean", "Nil", "Id", "Comments", 
		"Skip_NewLine", "NewLine", "WS"
	};


	    Stack<int> stack_of_pathen_level= new Stack<int>();
	    protected int pathen_level=0;
	    protected Boolean can_skip_newline=true;


	public langLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public langLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'if'", "'elif'", "'else'", "'var'", "'do'", "'end'", 
		"'while'", "'next'", "'continue'", "'stop'", "'break'", "'return'", null, 
		null, "'~'", null, "'|'", null, null, null, null, null, "'**'", "'='", 
		null, "'['", null, "'{'", null, "'('", null, "','", "';'", "'.'", null, 
		null, null, null, null, null, null, "'nil'", null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Print", "If", "ElseIF", "Else", "Var", "Do", "End", "While", "Next", 
		"Continue", "Stop", "Break", "Return", "Boolean_not", "Boolean_operator", 
		"Bitwise_not", "Bitwise_operators", "Bitwise_Or", "Hash_pair", "Bitwise_shift", 
		"Relational", "Equalty", "Additive", "Exponent", "Assignment", "Multiplicative", 
		"Square_openPathen", "Square_closePathen", "Hash_openPathen", "Hash_closePathen", 
		"OpenPathen", "ClosePathen", "Comma", "Dot_comma", "Dot", "String", "Float", 
		"Hexa", "Octal", "Binary", "Decimal", "Boolean", "Nil", "Id", "Comments", 
		"Skip_NewLine", "NewLine", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "langLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static langLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 0 : Print_action(_localctx, actionIndex); break;
		case 1 : If_action(_localctx, actionIndex); break;
		case 2 : ElseIF_action(_localctx, actionIndex); break;
		case 3 : Else_action(_localctx, actionIndex); break;
		case 4 : Var_action(_localctx, actionIndex); break;
		case 5 : Do_action(_localctx, actionIndex); break;
		case 6 : End_action(_localctx, actionIndex); break;
		case 7 : While_action(_localctx, actionIndex); break;
		case 8 : Next_action(_localctx, actionIndex); break;
		case 9 : Continue_action(_localctx, actionIndex); break;
		case 10 : Stop_action(_localctx, actionIndex); break;
		case 11 : Break_action(_localctx, actionIndex); break;
		case 12 : Return_action(_localctx, actionIndex); break;
		case 13 : Boolean_not_action(_localctx, actionIndex); break;
		case 14 : Boolean_operator_action(_localctx, actionIndex); break;
		case 15 : Bitwise_not_action(_localctx, actionIndex); break;
		case 16 : Bitwise_operators_action(_localctx, actionIndex); break;
		case 17 : Bitwise_Or_action(_localctx, actionIndex); break;
		case 18 : Hash_pair_action(_localctx, actionIndex); break;
		case 19 : Bitwise_shift_action(_localctx, actionIndex); break;
		case 20 : Relational_action(_localctx, actionIndex); break;
		case 21 : Equalty_action(_localctx, actionIndex); break;
		case 22 : Additive_action(_localctx, actionIndex); break;
		case 23 : Exponent_action(_localctx, actionIndex); break;
		case 24 : Assignment_action(_localctx, actionIndex); break;
		case 25 : Multiplicative_action(_localctx, actionIndex); break;
		case 26 : Square_openPathen_action(_localctx, actionIndex); break;
		case 27 : Square_closePathen_action(_localctx, actionIndex); break;
		case 28 : Hash_openPathen_action(_localctx, actionIndex); break;
		case 29 : Hash_closePathen_action(_localctx, actionIndex); break;
		case 30 : OpenPathen_action(_localctx, actionIndex); break;
		case 31 : ClosePathen_action(_localctx, actionIndex); break;
		case 32 : Comma_action(_localctx, actionIndex); break;
		case 33 : Dot_comma_action(_localctx, actionIndex); break;
		case 34 : Dot_action(_localctx, actionIndex); break;
		case 35 : String_action(_localctx, actionIndex); break;
		case 36 : Float_action(_localctx, actionIndex); break;
		case 37 : Hexa_action(_localctx, actionIndex); break;
		case 38 : Octal_action(_localctx, actionIndex); break;
		case 39 : Binary_action(_localctx, actionIndex); break;
		case 40 : Decimal_action(_localctx, actionIndex); break;
		case 41 : Boolean_action(_localctx, actionIndex); break;
		case 42 : Nil_action(_localctx, actionIndex); break;
		case 43 : Id_action(_localctx, actionIndex); break;
		}
	}
	private void Print_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: can_skip_newline= true; break;
		}
	}
	private void If_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1:  stack_of_pathen_level.Push(this.pathen_level);this.pathen_level=0; can_skip_newline= true; break;
		}
	}
	private void ElseIF_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: can_skip_newline=true; break;
		}
	}
	private void Else_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: can_skip_newline= true; break;
		}
	}
	private void Var_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: can_skip_newline= true; break;
		}
	}
	private void Do_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 5: stack_of_pathen_level.Push(this.pathen_level);this.pathen_level=0;can_skip_newline= true; break;
		}
	}
	private void End_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6: this.pathen_level= this.stack_of_pathen_level.Pop();can_skip_newline= false; break;
		}
	}
	private void While_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 7: stack_of_pathen_level.Push(this.pathen_level);this.pathen_level=0;can_skip_newline = true; break;
		}
	}
	private void Next_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 8: this.pathen_level= this.stack_of_pathen_level.Pop();can_skip_newline= false; break;
		}
	}
	private void Continue_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 9: can_skip_newline= false; break;
		}
	}
	private void Stop_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 10: can_skip_newline= false; break;
		}
	}
	private void Break_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 11: can_skip_newline=true; break;
		}
	}
	private void Return_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 12: can_skip_newline=true; break;
		}
	}
	private void Boolean_not_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 13: can_skip_newline=false; break;
		}
	}
	private void Boolean_operator_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 14: can_skip_newline= true; break;
		}
	}
	private void Bitwise_not_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 15: can_skip_newline=false; break;
		}
	}
	private void Bitwise_operators_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 16: can_skip_newline= true; break;
		}
	}
	private void Bitwise_Or_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 17: can_skip_newline= true; break;
		}
	}
	private void Hash_pair_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 18: can_skip_newline= true; break;
		}
	}
	private void Bitwise_shift_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 19: can_skip_newline= true; break;
		}
	}
	private void Relational_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 20: can_skip_newline= true; break;
		}
	}
	private void Equalty_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 21: can_skip_newline= true; break;
		}
	}
	private void Additive_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 22: can_skip_newline = true;
		 break;
		}
	}
	private void Exponent_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 23: can_skip_newline= true; break;
		}
	}
	private void Assignment_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 24: can_skip_newline= true; break;
		}
	}
	private void Multiplicative_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 25: can_skip_newline= true; break;
		}
	}
	private void Square_openPathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 26: pathen_level++; break;
		}
	}
	private void Square_closePathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 27: pathen_level--;can_skip_newline=false; break;
		}
	}
	private void Hash_openPathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 28: pathen_level++; break;
		}
	}
	private void Hash_closePathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 29: pathen_level--;can_skip_newline=false; break;
		}
	}
	private void OpenPathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 30: pathen_level++; break;
		}
	}
	private void ClosePathen_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 31: pathen_level--;can_skip_newline=false; break;
		}
	}
	private void Comma_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 32: can_skip_newline=true; break;
		}
	}
	private void Dot_comma_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 33: can_skip_newline= true; break;
		}
	}
	private void Dot_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 34: can_skip_newline=true; break;
		}
	}
	private void String_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 35: can_skip_newline=false; break;
		}
	}
	private void Float_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 36: can_skip_newline= false; break;
		}
	}
	private void Hexa_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 37: can_skip_newline= false; break;
		}
	}
	private void Octal_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 38: can_skip_newline= false; break;
		}
	}
	private void Binary_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 39: can_skip_newline= false; break;
		}
	}
	private void Decimal_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 40: can_skip_newline= false; break;
		}
	}
	private void Boolean_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 41: can_skip_newline= false; break;
		}
	}
	private void Nil_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 42: can_skip_newline= false; break;
		}
	}
	private void Id_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 43: can_skip_newline= false; break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27 : return Square_closePathen_sempred(_localctx, predIndex);
		case 29 : return Hash_closePathen_sempred(_localctx, predIndex);
		case 31 : return ClosePathen_sempred(_localctx, predIndex);
		case 45 : return Skip_NewLine_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool Square_closePathen_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return pathen_level>0;
		}
		return true;
	}
	private bool Hash_closePathen_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return pathen_level>0;
		}
		return true;
	}
	private bool ClosePathen_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return pathen_level>0;
		}
		return true;
	}
	private bool Skip_NewLine_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return pathen_level > 0 || can_skip_newline;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x32', '\x194', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC7', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xD2', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xDD', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xE7', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xEF', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\xF8', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x100', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', 
		'%', '\a', '%', '\x132', '\n', '%', '\f', '%', '\xE', '%', '\x135', '\v', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x6', '&', '\x13D', '\n', '&', '\r', '&', '\xE', '&', '\x13E', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x6', '\'', '\x146', 
		'\n', '\'', '\r', '\'', '\xE', '\'', '\x147', '\x3', '\'', '\x3', '\'', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x6', '(', '\x14F', '\n', '(', '\r', 
		'(', '\xE', '(', '\x150', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x6', ')', '\x158', '\n', ')', '\r', ')', '\xE', ')', '\x159', 
		'\x3', ')', '\x3', ')', '\x3', '*', '\x6', '*', '\x15F', '\n', '*', '\r', 
		'*', '\xE', '*', '\x160', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x16E', '\n', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\a', '-', '\x17A', '\n', '-', '\f', '-', '\xE', '-', 
		'\x17D', '\v', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\a', 
		'.', '\x183', '\n', '.', '\f', '.', '\xE', '.', '\x186', '\v', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x2', '\x2', '\x32', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', 
		'\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', '/', '\x19', 
		'\x31', '\x1A', '\x33', '\x1B', '\x35', '\x1C', '\x37', '\x1D', '\x39', 
		'\x1E', ';', '\x1F', '=', ' ', '?', '!', '\x41', '\"', '\x43', '#', '\x45', 
		'$', 'G', '%', 'I', '&', 'K', '\'', 'M', '(', 'O', ')', 'Q', '*', 'S', 
		'+', 'U', ',', 'W', '-', 'Y', '.', '[', '/', ']', '\x30', '_', '\x31', 
		'\x61', '\x32', '\x3', '\x2', '\x12', '\x4', '\x2', '(', '(', '`', '`', 
		'\x4', '\x2', '>', '>', '@', '@', '\x4', '\x2', '-', '-', '/', '/', '\x5', 
		'\x2', '\'', '\'', ',', ',', '\x31', '\x31', '\x3', '\x2', '$', '$', '\x4', 
		'\x2', 'Z', 'Z', 'z', 'z', '\x5', '\x2', '\x32', ';', '\x43', 'H', '\x63', 
		'h', '\x4', '\x2', 'Q', 'Q', 'q', 'q', '\x3', '\x2', '\x32', '\x39', '\x4', 
		'\x2', '\x44', '\x44', '\x64', '\x64', '\x3', '\x2', '\x32', '\x33', '\x3', 
		'\x2', '\x32', ';', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', 
		'|', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', 
		'|', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x5', '\x2', '\v', '\v', 
		'\xE', '\xF', '\"', '\"', '\x2', '\x1A6', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x2', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x2', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x2', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x2', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x2', 'G', '\x3', '\x2', '\x2', '\x2', '\x2', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x2', 'K', '\x3', '\x2', '\x2', '\x2', '\x2', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x2', 'O', '\x3', '\x2', '\x2', '\x2', '\x2', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x2', 'S', '\x3', '\x2', '\x2', '\x2', '\x2', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x2', 'W', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x2', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x2', ']', '\x3', '\x2', '\x2', '\x2', '\x2', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x5', 'k', '\x3', '\x2', '\x2', '\x2', '\a', 'p', 
		'\x3', '\x2', '\x2', '\x2', '\t', 'w', '\x3', '\x2', '\x2', '\x2', '\v', 
		'~', '\x3', '\x2', '\x2', '\x2', '\r', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x89', '\x3', '\x2', '\x2', '\x2', '\x11', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x97', '\x3', '\x2', '\x2', '\x2', '\x15', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1B', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x1F', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '!', '\xD5', '\x3', '\x2', '\x2', '\x2', '#', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '%', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\xE6', '\x3', '\x2', '\x2', '\x2', ')', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '+', '\xF7', '\x3', '\x2', '\x2', '\x2', '-', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x103', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x33', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x37', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x114', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '=', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x41', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x126', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x129', '\x3', '\x2', '\x2', '\x2', 'G', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\x12F', '\x3', '\x2', '\x2', '\x2', 'K', '\x139', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\x142', '\x3', '\x2', '\x2', '\x2', 'O', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', 'Q', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'S', '\x15E', '\x3', '\x2', '\x2', '\x2', 'U', '\x16D', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\x171', '\x3', '\x2', '\x2', '\x2', 'Y', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '[', '\x180', '\x3', '\x2', '\x2', '\x2', 
		']', '\x189', '\x3', '\x2', '\x2', '\x2', '_', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x190', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', 'r', '\x2', '\x2', '\x64', '\x65', '\a', 't', '\x2', '\x2', '\x65', 
		'\x66', '\a', 'k', '\x2', '\x2', '\x66', 'g', '\a', 'p', '\x2', '\x2', 
		'g', 'h', '\a', 'v', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\b', '\x2', '\x2', '\x2', 'j', '\x4', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', 'k', '\x2', '\x2', 'l', 'm', '\a', 'h', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\b', '\x3', '\x3', 
		'\x2', 'o', '\x6', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', 'g', '\x2', 
		'\x2', 'q', 'r', '\a', 'n', '\x2', '\x2', 'r', 's', '\a', 'k', '\x2', 
		'\x2', 's', 't', '\a', 'h', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\b', '\x4', '\x4', '\x2', 'v', '\b', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', 'g', '\x2', '\x2', 'x', 'y', '\a', 'n', '\x2', 
		'\x2', 'y', 'z', '\a', 'u', '\x2', '\x2', 'z', '{', '\a', 'g', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\b', '\x5', '\x5', 
		'\x2', '}', '\n', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', 'x', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x63', '\x2', '\x2', '\x80', '\x81', 
		'\a', 't', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\b', '\x6', '\x6', '\x2', '\x83', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\x66', '\x2', '\x2', '\x85', '\x86', '\a', 
		'q', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\b', '\a', '\a', '\x2', '\x88', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\a', 'g', '\x2', '\x2', '\x8A', '\x8B', '\a', 'p', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '\x66', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\b', '\b', '\b', '\x2', '\x8E', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', 'y', '\x2', 
		'\x2', '\x90', '\x91', '\a', 'j', '\x2', '\x2', '\x91', '\x92', '\a', 
		'k', '\x2', '\x2', '\x92', '\x93', '\a', 'n', '\x2', '\x2', '\x93', '\x94', 
		'\a', 'g', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\b', '\t', '\t', '\x2', '\x96', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\a', 'p', '\x2', '\x2', '\x98', '\x99', '\a', 
		'g', '\x2', '\x2', '\x99', '\x9A', '\a', 'z', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', 'v', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\b', '\n', '\n', '\x2', '\x9D', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x65', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'q', '\x2', '\x2', '\xA0', '\xA1', '\a', 'p', '\x2', '\x2', '\xA1', '\xA2', 
		'\a', 'v', '\x2', '\x2', '\xA2', '\xA3', '\a', 'k', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', 'p', '\x2', '\x2', '\xA4', '\xA5', '\a', 'w', '\x2', '\x2', 
		'\xA5', '\xA6', '\a', 'g', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\b', '\v', '\v', '\x2', '\xA8', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', 'u', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', 'v', '\x2', '\x2', '\xAB', '\xAC', '\a', 'q', '\x2', '\x2', 
		'\xAC', '\xAD', '\a', 'r', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\b', '\f', '\f', '\x2', '\xAF', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x64', '\x2', '\x2', 
		'\xB1', '\xB2', '\a', 't', '\x2', '\x2', '\xB2', '\xB3', '\a', 'g', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '\x63', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'm', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\b', '\r', '\r', '\x2', '\xB7', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', 't', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'g', '\x2', '\x2', '\xBA', '\xBB', '\a', 'v', '\x2', '\x2', '\xBB', '\xBC', 
		'\a', 'w', '\x2', '\x2', '\xBC', '\xBD', '\a', 't', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', 'p', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\b', '\xE', '\xE', '\x2', '\xC0', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 'p', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', 'q', '\x2', '\x2', '\xC3', '\xC7', '\a', 'v', '\x2', '\x2', 
		'\xC4', '\xC5', '\a', '#', '\x2', '\x2', '\xC5', '\xC7', '\b', '\xF', 
		'\xF', '\x2', '\xC6', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\a', '\x63', '\x2', '\x2', '\xC9', '\xCA', '\a', 'p', 
		'\x2', '\x2', '\xCA', '\xD2', '\a', '\x66', '\x2', '\x2', '\xCB', '\xCC', 
		'\a', 'q', '\x2', '\x2', '\xCC', '\xD2', '\a', 't', '\x2', '\x2', '\xCD', 
		'\xCE', '\a', '(', '\x2', '\x2', '\xCE', '\xD2', '\a', '(', '\x2', '\x2', 
		'\xCF', '\xD0', '\a', '~', '\x2', '\x2', '\xD0', '\xD2', '\a', '~', '\x2', 
		'\x2', '\xD1', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\b', '\x10', '\x10', '\x2', '\xD4', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x80', '\x2', '\x2', '\xD6', 
		'\xD7', '\b', '\x11', '\x11', '\x2', '\xD7', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xDD', '\t', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'z', '\x2', '\x2', '\xDA', '\xDB', '\a', 'q', '\x2', '\x2', '\xDB', '\xDD', 
		'\a', 't', '\x2', '\x2', '\xDC', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\b', '\x12', '\x12', '\x2', '\xDF', '$', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '~', '\x2', '\x2', '\xE1', 
		'\xE2', '\b', '\x13', '\x13', '\x2', '\xE2', '&', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE7', '\a', '<', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'?', '\x2', '\x2', '\xE5', '\xE7', '\a', '@', '\x2', '\x2', '\xE6', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\b', '\x14', 
		'\x14', '\x2', '\xE9', '(', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', '@', '\x2', '\x2', '\xEB', '\xEF', '\a', '@', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '>', '\x2', '\x2', '\xED', '\xEF', '\a', '>', '\x2', '\x2', 
		'\xEE', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', 
		'\b', '\x15', '\x15', '\x2', '\xF1', '*', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\a', '@', '\x2', '\x2', '\xF3', '\xF8', '\a', '?', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '>', '\x2', '\x2', '\xF5', '\xF8', '\a', 
		'?', '\x2', '\x2', '\xF6', '\xF8', '\t', '\x3', '\x2', '\x2', '\xF7', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\b', '\x16', '\x16', '\x2', '\xFA', 
		',', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '>', '\x2', '\x2', 
		'\xFC', '\x100', '\a', '@', '\x2', '\x2', '\xFD', '\xFE', '\a', '?', '\x2', 
		'\x2', '\xFE', '\x100', '\a', '?', '\x2', '\x2', '\xFF', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\b', '\x17', '\x17', 
		'\x2', '\x102', '.', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\t', 
		'\x4', '\x2', '\x2', '\x104', '\x105', '\b', '\x18', '\x18', '\x2', '\x105', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', ',', '\x2', 
		'\x2', '\x107', '\x108', '\a', ',', '\x2', '\x2', '\x108', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\b', '\x19', '\x19', '\x2', '\x10A', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '?', '\x2', 
		'\x2', '\x10C', '\x10D', '\b', '\x1A', '\x1A', '\x2', '\x10D', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\t', '\x5', '\x2', '\x2', 
		'\x10F', '\x110', '\b', '\x1B', '\x1B', '\x2', '\x110', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\a', ']', '\x2', '\x2', '\x112', 
		'\x113', '\b', '\x1C', '\x1C', '\x2', '\x113', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\a', '_', '\x2', '\x2', '\x115', '\x116', '\x6', 
		'\x1D', '\x2', '\x2', '\x116', '\x117', '\b', '\x1D', '\x1D', '\x2', '\x117', 
		':', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\a', '}', '\x2', '\x2', 
		'\x119', '\x11A', '\b', '\x1E', '\x1E', '\x2', '\x11A', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x11B', '\x11C', '\a', '\x7F', '\x2', '\x2', '\x11C', '\x11D', 
		'\x6', '\x1F', '\x3', '\x2', '\x11D', '\x11E', '\b', '\x1F', '\x1F', '\x2', 
		'\x11E', '>', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '*', 
		'\x2', '\x2', '\x120', '\x121', '\b', ' ', ' ', '\x2', '\x121', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\a', '+', '\x2', '\x2', '\x123', 
		'\x124', '\x6', '!', '\x4', '\x2', '\x124', '\x125', '\b', '!', '!', '\x2', 
		'\x125', '\x42', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\a', '.', 
		'\x2', '\x2', '\x127', '\x128', '\b', '\"', '\"', '\x2', '\x128', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '=', '\x2', '\x2', 
		'\x12A', '\x12B', '\b', '#', '#', '\x2', '\x12B', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12D', '\a', '\x30', '\x2', '\x2', '\x12D', '\x12E', 
		'\b', '$', '$', '\x2', '\x12E', 'H', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x133', '\a', '$', '\x2', '\x2', '\x130', '\x132', '\n', '\x6', '\x2', 
		'\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\a', '$', '\x2', '\x2', '\x137', '\x138', '\b', '%', '%', '\x2', 
		'\x138', 'J', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x5', 'S', 
		'*', '\x2', '\x13A', '\x13C', '\a', '\x30', '\x2', '\x2', '\x13B', '\x13D', 
		'\x5', 'S', '*', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\b', '&', '&', 
		'\x2', '\x141', 'L', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', 
		'\x32', '\x2', '\x2', '\x143', '\x145', '\t', '\a', '\x2', '\x2', '\x144', 
		'\x146', '\t', '\b', '\x2', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\b', 
		'\'', '\'', '\x2', '\x14A', 'N', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '\x32', '\x2', '\x2', '\x14C', '\x14E', '\t', '\t', '\x2', 
		'\x2', '\x14D', '\x14F', '\t', '\n', '\x2', '\x2', '\x14E', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\b', '(', '(', '\x2', '\x153', 'P', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\a', '\x32', '\x2', '\x2', '\x155', '\x157', '\t', '\v', '\x2', 
		'\x2', '\x156', '\x158', '\t', '\f', '\x2', '\x2', '\x157', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\b', ')', ')', '\x2', '\x15C', 'R', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15F', '\t', '\r', '\x2', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\b', 
		'*', '*', '\x2', '\x163', 'T', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\a', 'v', '\x2', '\x2', '\x165', '\x166', '\a', 't', '\x2', '\x2', '\x166', 
		'\x167', '\a', 'w', '\x2', '\x2', '\x167', '\x16E', '\a', 'g', '\x2', 
		'\x2', '\x168', '\x169', '\a', 'h', '\x2', '\x2', '\x169', '\x16A', '\a', 
		'\x63', '\x2', '\x2', '\x16A', '\x16B', '\a', 'n', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', 'u', '\x2', '\x2', '\x16C', '\x16E', '\a', 'g', '\x2', 
		'\x2', '\x16D', '\x164', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\b', '+', '+', '\x2', '\x170', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x172', '\a', 'p', '\x2', '\x2', '\x172', '\x173', '\a', 
		'k', '\x2', '\x2', '\x173', '\x174', '\a', 'n', '\x2', '\x2', '\x174', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\b', ',', ',', 
		'\x2', '\x176', 'X', '\x3', '\x2', '\x2', '\x2', '\x177', '\x17B', '\t', 
		'\xE', '\x2', '\x2', '\x178', '\x17A', '\t', '\xF', '\x2', '\x2', '\x179', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\b', 
		'-', '-', '\x2', '\x17F', 'Z', '\x3', '\x2', '\x2', '\x2', '\x180', '\x184', 
		'\a', '%', '\x2', '\x2', '\x181', '\x183', '\n', '\x10', '\x2', '\x2', 
		'\x182', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\b', '.', '.', '\x2', '\x188', '\\', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18A', '\a', '\f', '\x2', '\x2', '\x18A', '\x18B', '\x6', '/', '\x5', 
		'\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', 
		'\b', '/', '.', '\x2', '\x18D', '^', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\a', '\f', '\x2', '\x2', '\x18F', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\t', '\x11', '\x2', '\x2', '\x191', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\b', '\x31', '.', '\x2', 
		'\x193', '\x62', '\x3', '\x2', '\x2', '\x2', '\x14', '\x2', '\xC6', '\xD1', 
		'\xDC', '\xE6', '\xEE', '\xF7', '\xFF', '\x133', '\x13E', '\x145', '\x147', 
		'\x150', '\x159', '\x160', '\x16D', '\x17B', '\x184', '/', '\x3', '\x2', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x4', '\x4', '\x3', '\x5', '\x5', 
		'\x3', '\x6', '\x6', '\x3', '\a', '\a', '\x3', '\b', '\b', '\x3', '\t', 
		'\t', '\x3', '\n', '\n', '\x3', '\v', '\v', '\x3', '\f', '\f', '\x3', 
		'\r', '\r', '\x3', '\xE', '\xE', '\x3', '\xF', '\xF', '\x3', '\x10', '\x10', 
		'\x3', '\x11', '\x11', '\x3', '\x12', '\x12', '\x3', '\x13', '\x13', '\x3', 
		'\x14', '\x14', '\x3', '\x15', '\x15', '\x3', '\x16', '\x16', '\x3', '\x17', 
		'\x17', '\x3', '\x18', '\x18', '\x3', '\x19', '\x19', '\x3', '\x1A', '\x1A', 
		'\x3', '\x1B', '\x1B', '\x3', '\x1C', '\x1C', '\x3', '\x1D', '\x1D', '\x3', 
		'\x1E', '\x1E', '\x3', '\x1F', '\x1F', '\x3', ' ', ' ', '\x3', '!', '!', 
		'\x3', '\"', '\"', '\x3', '#', '#', '\x3', '$', '$', '\x3', '%', '%', 
		'\x3', '&', '&', '\x3', '\'', '\'', '\x3', '(', '(', '\x3', ')', ')', 
		'\x3', '*', '*', '\x3', '+', '+', '\x3', ',', ',', '\x3', '-', '-', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
