//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from langParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Planguage;
using Planguage.Errors;
using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class langParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Print=1, If=2, ElseIF=3, Else=4, Var=5, Do=6, End=7, While=8, Next=9, 
		Continue=10, Stop=11, Break=12, Return=13, Boolean_not=14, Boolean_operator=15, 
		Bitwise_not=16, Bitwise_operators=17, Bitwise_Or=18, Hash_pair=19, Bitwise_shift=20, 
		Relational=21, Equalty=22, Additive=23, Exponent=24, Assignment=25, Multiplicative=26, 
		Square_openPathen=27, Square_closePathen=28, Hash_openPathen=29, Hash_closePathen=30, 
		OpenPathen=31, ClosePathen=32, Comma=33, Dot_comma=34, Dot=35, String=36, 
		Float=37, Hexa=38, Octal=39, Binary=40, Decimal=41, Boolean=42, Nil=43, 
		Id=44, Comments=45, Skip_NewLine=46, NewLine=47, WS=48;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_exps = 2, RULE_array_element = 3, RULE_expression = 4, 
		RULE_hash_key_value = 5, RULE_member_function = 6, RULE_function_call = 7, 
		RULE_print = 8, RULE_hash = 9, RULE_array = 10, RULE_flt = 11, RULE_number = 12, 
		RULE_truefalse = 13, RULE_nil = 14, RULE_string = 15, RULE_function_dec = 16, 
		RULE_variable_decleration = 17, RULE_last_expression_in_while = 18, RULE_while_stat = 19, 
		RULE_last_expression_in_if = 20, RULE_if_stat = 21, RULE_return_stat = 22, 
		RULE_stop_stat = 23, RULE_break_stat = 24, RULE_continue_stat = 25, RULE_iif = 26, 
		RULE_else_if = 27, RULE_elsex = 28;
	public static readonly string[] ruleNames = {
		"prog", "line", "exps", "array_element", "expression", "hash_key_value", 
		"member_function", "function_call", "print", "hash", "array", "flt", "number", 
		"truefalse", "nil", "string", "function_dec", "variable_decleration", 
		"last_expression_in_while", "while_stat", "last_expression_in_if", "if_stat", 
		"return_stat", "stop_stat", "break_stat", "continue_stat", "iif", "else_if", 
		"elsex"
	};

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'if'", "'elif'", "'else'", "'var'", "'do'", "'end'", 
		"'while'", "'next'", "'continue'", "'stop'", "'break'", "'return'", null, 
		null, "'~'", null, "'|'", null, null, null, null, null, "'**'", "'='", 
		null, "'['", null, "'{'", null, "'('", null, "','", "';'", "'.'", null, 
		null, null, null, null, null, null, "'nil'", null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Print", "If", "ElseIF", "Else", "Var", "Do", "End", "While", "Next", 
		"Continue", "Stop", "Break", "Return", "Boolean_not", "Boolean_operator", 
		"Bitwise_not", "Bitwise_operators", "Bitwise_Or", "Hash_pair", "Bitwise_shift", 
		"Relational", "Equalty", "Additive", "Exponent", "Assignment", "Multiplicative", 
		"Square_openPathen", "Square_closePathen", "Hash_openPathen", "Hash_closePathen", 
		"OpenPathen", "ClosePathen", "Comma", "Dot_comma", "Dot", "String", "Float", 
		"Hexa", "Octal", "Binary", "Decimal", "Boolean", "Nil", "Id", "Comments", 
		"Skip_NewLine", "NewLine", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "langParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static langParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    Stack<While_statContext> stack_of_while = new Stack<While_statContext>();
	    Stack<If_statContext> stack_of_if = new Stack<If_statContext>();
	    protected int function_nested_level=0;

		public langParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public langParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(langParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 58; line();
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Print) | (1L << If) | (1L << ElseIF) | (1L << Else) | (1L << Var) | (1L << Do) | (1L << End) | (1L << While) | (1L << Next) | (1L << Continue) | (1L << Stop) | (1L << Break) | (1L << Return) | (1L << Boolean_not) | (1L << Boolean_operator) | (1L << Bitwise_not) | (1L << Bitwise_operators) | (1L << Bitwise_Or) | (1L << Hash_pair) | (1L << Bitwise_shift) | (1L << Relational) | (1L << Equalty) | (1L << Additive) | (1L << Exponent) | (1L << Assignment) | (1L << Multiplicative) | (1L << Square_openPathen) | (1L << Square_closePathen) | (1L << Hash_openPathen) | (1L << Hash_closePathen) | (1L << OpenPathen) | (1L << ClosePathen) | (1L << Comma) | (1L << Dot_comma) | (1L << Dot) | (1L << String) | (1L << Float) | (1L << Hexa) | (1L << Octal) | (1L << Binary) | (1L << Decimal) | (1L << Boolean) | (1L << Nil) | (1L << Id) | (1L << Comments) | (1L << Skip_NewLine) | (1L << NewLine) | (1L << WS))) != 0)) {
				{
				State = 64; expression(0);
				}
			}

			State = 67; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Dot_comma() { return GetToken(langParser.Dot_comma, 0); }
		public ITerminalNode NewLine() { return GetToken(langParser.NewLine, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 69; expression(0);
				}
				break;
			}
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{

				    NotifyErrorListeners("missing an operator or a line-terminator|sperator");

				State = 73; expression(0);
				}
				break;
			}
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==Dot_comma || _la==NewLine) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpsContext : ParserRuleContext {
		public int position;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterExps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitExps(this);
		}
	}

	[RuleVersion(0)]
	public ExpsContext exps() {
		ExpsContext _localctx = new ExpsContext(Context, State);
		EnterRule(_localctx, 4, RULE_exps);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterArray_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitArray_element(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementContext array_element() {
		Array_elementContext _localctx = new Array_elementContext(Context, State);
		EnterRule(_localctx, 6, RULE_array_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pos_negContext : ExpressionContext {
		public IToken _Additive;
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Pos_negContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterPos_neg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitPos_neg(this);
		}
	}
	public partial class AssignmentsContext : ExpressionContext {
		public IToken _Assignment;
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
	}
	public partial class Bitwise_notContext : ExpressionContext {
		public IToken _Bitwise_not;
		public ITerminalNode Bitwise_not() { return GetToken(langParser.Bitwise_not, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_notContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBitwise_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBitwise_not(this);
		}
	}
	public partial class Error_missing_expression_or_close_pathen_member_accessContext : ExpressionContext {
		public IToken _Square_openPathen;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Square_openPathen() { return GetToken(langParser.Square_openPathen, 0); }
		public Error_missing_expression_or_close_pathen_member_accessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterError_missing_expression_or_close_pathen_member_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitError_missing_expression_or_close_pathen_member_access(this);
		}
	}
	public partial class Missing_exp_before_opContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Bitwise_operators() { return GetToken(langParser.Bitwise_operators, 0); }
		public ITerminalNode Bitwise_Or() { return GetToken(langParser.Bitwise_Or, 0); }
		public Missing_exp_before_opContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_op(this);
		}
	}
	public partial class Member_accessesContext : ExpressionContext {
		public IToken _Square_openPathen;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Square_openPathen() { return GetToken(langParser.Square_openPathen, 0); }
		public ITerminalNode Square_closePathen() { return GetToken(langParser.Square_closePathen, 0); }
		public Member_accessesContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMember_accesses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMember_accesses(this);
		}
	}
	public partial class Missing_exp_after_relaContext : ExpressionContext {
		public IToken _Relational;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Relational() { return GetToken(langParser.Relational, 0); }
		public Missing_exp_after_relaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_rela(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_rela(this);
		}
	}
	public partial class Missing_exp_before_hash_pairContext : ExpressionContext {
		public IToken _Hash_pair;
		public ITerminalNode Hash_pair() { return GetToken(langParser.Hash_pair, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_hash_pairContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_hash_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_hash_pair(this);
		}
	}
	public partial class Bitwise_shiftContext : ExpressionContext {
		public IToken _Bitwise_shift;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Bitwise_shift() { return GetToken(langParser.Bitwise_shift, 0); }
		public Bitwise_shiftContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBitwise_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBitwise_shift(this);
		}
	}
	public partial class Unexpected_token_mulContext : ExpressionContext {
		public IToken _Multiplicative;
		public ITerminalNode Multiplicative() { return GetToken(langParser.Multiplicative, 0); }
		public Unexpected_token_mulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_mul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_mul(this);
		}
	}
	public partial class Missing_exp_after_opContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Bitwise_operators() { return GetToken(langParser.Bitwise_operators, 0); }
		public ITerminalNode Bitwise_Or() { return GetToken(langParser.Bitwise_Or, 0); }
		public Missing_exp_after_opContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_op(this);
		}
	}
	public partial class Function_in_pathensContext : ExpressionContext {
		public ITerminalNode OpenPathen() { return GetToken(langParser.OpenPathen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ClosePathen() { return GetToken(langParser.ClosePathen, 0); }
		public Function_in_pathensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFunction_in_pathens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFunction_in_pathens(this);
		}
	}
	public partial class Missing_exp_before_mulContext : ExpressionContext {
		public IToken _Multiplicative;
		public ITerminalNode Multiplicative() { return GetToken(langParser.Multiplicative, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_mulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_mul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_mul(this);
		}
	}
	public partial class Missing_exp_after_bshContext : ExpressionContext {
		public IToken _Bitwise_shift;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Bitwise_shift() { return GetToken(langParser.Bitwise_shift, 0); }
		public Missing_exp_after_bshContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_bsh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_bsh(this);
		}
	}
	public partial class Boolean_notContext : ExpressionContext {
		public IToken _Boolean_not;
		public ITerminalNode Boolean_not() { return GetToken(langParser.Boolean_not, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Boolean_notContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBoolean_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBoolean_not(this);
		}
	}
	public partial class Missing_exp_boolean_notContext : ExpressionContext {
		public IToken _Boolean_not;
		public ITerminalNode Boolean_not() { return GetToken(langParser.Boolean_not, 0); }
		public Missing_exp_boolean_notContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_boolean_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_boolean_not(this);
		}
	}
	public partial class While_statementContext : ExpressionContext {
		public While_statContext while_stat() {
			return GetRuleContext<While_statContext>(0);
		}
		public While_statementContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}
	public partial class NumsContext : ExpressionContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterNums(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitNums(this);
		}
	}
	public partial class Unexpected_token_bsContext : ExpressionContext {
		public IToken _Bitwise_shift;
		public ITerminalNode Bitwise_shift() { return GetToken(langParser.Bitwise_shift, 0); }
		public Unexpected_token_bsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_bs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_bs(this);
		}
	}
	public partial class Member_settingsContext : ExpressionContext {
		public IToken _Square_openPathen;
		public IToken _Assignment;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Square_openPathen() { return GetToken(langParser.Square_openPathen, 0); }
		public ITerminalNode Square_closePathen() { return GetToken(langParser.Square_closePathen, 0); }
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public Member_settingsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMember_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMember_settings(this);
		}
	}
	public partial class Missing_exp_after_eqContext : ExpressionContext {
		public IToken _Equalty;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Equalty() { return GetToken(langParser.Equalty, 0); }
		public Missing_exp_after_eqContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_eq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_eq(this);
		}
	}
	public partial class Missing_exp_after_mulContext : ExpressionContext {
		public IToken _Multiplicative;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Multiplicative() { return GetToken(langParser.Multiplicative, 0); }
		public Missing_exp_after_mulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_mul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_mul(this);
		}
	}
	public partial class Missing_exp_additiveContext : ExpressionContext {
		public IToken _Additive;
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public Missing_exp_additiveContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_additive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_additive(this);
		}
	}
	public partial class Out_of_hash_pairContext : ExpressionContext {
		public IToken _Hash_pair;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Hash_pair() { return GetToken(langParser.Hash_pair, 0); }
		public Out_of_hash_pairContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterOut_of_hash_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitOut_of_hash_pair(this);
		}
	}
	public partial class Missing_exp_after_bopContext : ExpressionContext {
		public IToken _Boolean_operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Boolean_operator() { return GetToken(langParser.Boolean_operator, 0); }
		public Missing_exp_after_bopContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_bop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_bop(this);
		}
	}
	public partial class Fn_callContext : ExpressionContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Fn_callContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFn_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFn_call(this);
		}
	}
	public partial class Missing_exp_after_adContext : ExpressionContext {
		public IToken _Additive;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public Missing_exp_after_adContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_ad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_ad(this);
		}
	}
	public partial class Misssing_expression_after_member_settingContext : ExpressionContext {
		public IToken _Square_openPathen;
		public IToken _Assignment;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Square_openPathen() { return GetToken(langParser.Square_openPathen, 0); }
		public ITerminalNode Square_closePathen() { return GetToken(langParser.Square_closePathen, 0); }
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public Misssing_expression_after_member_settingContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMisssing_expression_after_member_setting(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMisssing_expression_after_member_setting(this);
		}
	}
	public partial class FloatContext : ExpressionContext {
		public FltContext flt() {
			return GetRuleContext<FltContext>(0);
		}
		public FloatContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
	}
	public partial class NilsContext : ExpressionContext {
		public NilContext nil() {
			return GetRuleContext<NilContext>(0);
		}
		public NilsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterNils(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitNils(this);
		}
	}
	public partial class Unexpected_token_opContext : ExpressionContext {
		public IToken op;
		public ITerminalNode Bitwise_operators() { return GetToken(langParser.Bitwise_operators, 0); }
		public ITerminalNode Bitwise_Or() { return GetToken(langParser.Bitwise_Or, 0); }
		public Unexpected_token_opContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_op(this);
		}
	}
	public partial class AdditivesContext : ExpressionContext {
		public IToken _Additive;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public AdditivesContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterAdditives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitAdditives(this);
		}
	}
	public partial class Misssing_expression_after_assignmentContext : ExpressionContext {
		public IToken _Assignment;
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public Misssing_expression_after_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMisssing_expression_after_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMisssing_expression_after_assignment(this);
		}
	}
	public partial class ArraysContext : ExpressionContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArraysContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterArrays(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitArrays(this);
		}
	}
	public partial class Missing_exp_before_bsContext : ExpressionContext {
		public IToken _Bitwise_shift;
		public ITerminalNode Bitwise_shift() { return GetToken(langParser.Bitwise_shift, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_bsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_bs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_bs(this);
		}
	}
	public partial class Missing_exp_after_asContext : ExpressionContext {
		public IToken _Assignment;
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_after_asContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_as(this);
		}
	}
	public partial class Missing_exp_bitwise_notContext : ExpressionContext {
		public IToken _Bitwise_not;
		public ITerminalNode Bitwise_not() { return GetToken(langParser.Bitwise_not, 0); }
		public Missing_exp_bitwise_notContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_bitwise_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_bitwise_not(this);
		}
	}
	public partial class Bitwise_operatorsContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Bitwise_operators() { return GetToken(langParser.Bitwise_operators, 0); }
		public ITerminalNode Bitwise_Or() { return GetToken(langParser.Bitwise_Or, 0); }
		public Bitwise_operatorsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBitwise_operators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBitwise_operators(this);
		}
	}
	public partial class Unexpected_token_eqContext : ExpressionContext {
		public IToken _Equalty;
		public ITerminalNode Equalty() { return GetToken(langParser.Equalty, 0); }
		public Unexpected_token_eqContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_eq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_eq(this);
		}
	}
	public partial class HashsContext : ExpressionContext {
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public HashsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterHashs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitHashs(this);
		}
	}
	public partial class Missing_exp_before_relaContext : ExpressionContext {
		public IToken _Relational;
		public ITerminalNode Relational() { return GetToken(langParser.Relational, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_relaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_rela(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_rela(this);
		}
	}
	public partial class ExponentsContext : ExpressionContext {
		public IToken _Exponent;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Exponent() { return GetToken(langParser.Exponent, 0); }
		public ExponentsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterExponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitExponents(this);
		}
	}
	public partial class Unexpected_token_assContext : ExpressionContext {
		public IToken _Assignment;
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unexpected_token_assContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_ass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_ass(this);
		}
	}
	public partial class Variable_declerationsContext : ExpressionContext {
		public Variable_declerationContext variable_decleration() {
			return GetRuleContext<Variable_declerationContext>(0);
		}
		public Variable_declerationsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterVariable_declerations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitVariable_declerations(this);
		}
	}
	public partial class StringsContext : ExpressionContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
	}
	public partial class Error_missing_close_pathenContext : ExpressionContext {
		public ITerminalNode OpenPathen() { return GetToken(langParser.OpenPathen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_missing_close_pathenContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterError_missing_close_pathen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitError_missing_close_pathen(this);
		}
	}
	public partial class If_statementsContext : ExpressionContext {
		public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		public If_statementsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterIf_statements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitIf_statements(this);
		}
	}
	public partial class Missing_exp_before_exponentContext : ExpressionContext {
		public IToken _Exponent;
		public ITerminalNode Exponent() { return GetToken(langParser.Exponent, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_exponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_exponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_exponent(this);
		}
	}
	public partial class Unexpected_token_relaContext : ExpressionContext {
		public IToken _Relational;
		public ITerminalNode Relational() { return GetToken(langParser.Relational, 0); }
		public Unexpected_token_relaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_rela(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_rela(this);
		}
	}
	public partial class BooleansContext : ExpressionContext {
		public TruefalseContext truefalse() {
			return GetRuleContext<TruefalseContext>(0);
		}
		public BooleansContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBooleans(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBooleans(this);
		}
	}
	public partial class Missing_exp_before_eqContext : ExpressionContext {
		public IToken _Equalty;
		public ITerminalNode Equalty() { return GetToken(langParser.Equalty, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_eqContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_eq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_eq(this);
		}
	}
	public partial class Unexpected_token_boolopContext : ExpressionContext {
		public IToken _Boolean_operator;
		public ITerminalNode Boolean_operator() { return GetToken(langParser.Boolean_operator, 0); }
		public Unexpected_token_boolopContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_boolop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_boolop(this);
		}
	}
	public partial class EqualtiesContext : ExpressionContext {
		public IToken _Equalty;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Equalty() { return GetToken(langParser.Equalty, 0); }
		public EqualtiesContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterEqualties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitEqualties(this);
		}
	}
	public partial class DotxContext : ExpressionContext {
		public ITerminalNode Dot() { return GetToken(langParser.Dot, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DotxContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterDotx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitDotx(this);
		}
	}
	public partial class Boolean_operatorsContext : ExpressionContext {
		public IToken _Boolean_operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Boolean_operator() { return GetToken(langParser.Boolean_operator, 0); }
		public Boolean_operatorsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBoolean_operators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBoolean_operators(this);
		}
	}
	public partial class IdentifiersContext : ExpressionContext {
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public IdentifiersContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
	}
	public partial class Missing_exp_before_boolopContext : ExpressionContext {
		public IToken _Boolean_operator;
		public ITerminalNode Boolean_operator() { return GetToken(langParser.Boolean_operator, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_boolopContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_boolop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_boolop(this);
		}
	}
	public partial class Unexpected_token_addContext : ExpressionContext {
		public IToken _Additive;
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public Unexpected_token_addContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_add(this);
		}
	}
	public partial class PrintsContext : ExpressionContext {
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PrintsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterPrints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitPrints(this);
		}
	}
	public partial class Missing_exp_after_expContext : ExpressionContext {
		public IToken _Exponent;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Exponent() { return GetToken(langParser.Exponent, 0); }
		public Missing_exp_after_expContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_after_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_after_exp(this);
		}
	}
	public partial class Missing_exp_before_addContext : ExpressionContext {
		public IToken _Additive;
		public ITerminalNode Additive() { return GetToken(langParser.Additive, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Missing_exp_before_addContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMissing_exp_before_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMissing_exp_before_add(this);
		}
	}
	public partial class MultiplicationsContext : ExpressionContext {
		public IToken _Multiplicative;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiplicative() { return GetToken(langParser.Multiplicative, 0); }
		public MultiplicationsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMultiplications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMultiplications(this);
		}
	}
	public partial class Function_declerationsContext : ExpressionContext {
		public Function_decContext function_dec() {
			return GetRuleContext<Function_decContext>(0);
		}
		public Function_declerationsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFunction_declerations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFunction_declerations(this);
		}
	}
	public partial class RelationalsContext : ExpressionContext {
		public IToken _Relational;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Relational() { return GetToken(langParser.Relational, 0); }
		public RelationalsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterRelationals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitRelationals(this);
		}
	}
	public partial class Unexpected_token_exponentContext : ExpressionContext {
		public IToken _Exponent;
		public ITerminalNode Exponent() { return GetToken(langParser.Exponent, 0); }
		public Unexpected_token_exponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterUnexpected_token_exponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitUnexpected_token_exponent(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new Function_in_pathensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 83; Match(OpenPathen);
				State = 84; expression(0);
				State = 85; Match(ClosePathen);
				}
				break;
			case 2:
				{
				_localctx = new Fn_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; function_call();
				}
				break;
			case 3:
				{
				_localctx = new Function_declerationsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; function_dec();
				}
				break;
			case 4:
				{
				_localctx = new Variable_declerationsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; variable_decleration();
				}
				break;
			case 5:
				{
				_localctx = new PrintsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; print();
				}
				break;
			case 6:
				{
				_localctx = new If_statementsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; if_stat();
				}
				break;
			case 7:
				{
				_localctx = new While_statementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; while_stat();
				}
				break;
			case 8:
				{
				_localctx = new Pos_negContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; ((Pos_negContext)_localctx)._Additive = Match(Additive);
				State = 94; expression(62);
				}
				break;
			case 9:
				{
				_localctx = new Boolean_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95; ((Boolean_notContext)_localctx)._Boolean_not = Match(Boolean_not);
				State = 96; expression(61);
				}
				break;
			case 10:
				{
				_localctx = new Bitwise_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97; ((Bitwise_notContext)_localctx)._Bitwise_not = Match(Bitwise_not);
				State = 98; expression(60);
				}
				break;
			case 11:
				{
				_localctx = new AssignmentsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(Id);
				State = 100; ((AssignmentsContext)_localctx)._Assignment = Match(Assignment);
				State = 101; expression(50);
				}
				break;
			case 12:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; flt();
				}
				break;
			case 13:
				{
				_localctx = new NumsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; number();
				}
				break;
			case 14:
				{
				_localctx = new HashsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; hash();
				}
				break;
			case 15:
				{
				_localctx = new ArraysContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105; array();
				}
				break;
			case 16:
				{
				_localctx = new StringsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; @string();
				}
				break;
			case 17:
				{
				_localctx = new BooleansContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107; truefalse();
				}
				break;
			case 18:
				{
				_localctx = new NilsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; nil();
				}
				break;
			case 19:
				{
				_localctx = new IdentifiersContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; Match(Id);
				}
				break;
			case 20:
				{
				_localctx = new Error_missing_close_pathenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110; Match(OpenPathen);
				State = 111; expression(41);
				NotifyErrorListeners("expecting \")\"");
				}
				break;
			case 21:
				{
				_localctx = new Missing_exp_additiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114; ((Missing_exp_additiveContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("missing an expression after " +(((Missing_exp_additiveContext)_localctx)._Additive!=null?((Missing_exp_additiveContext)_localctx)._Additive.Text:null) + "token");
				}
				break;
			case 22:
				{
				_localctx = new Missing_exp_boolean_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116; ((Missing_exp_boolean_notContext)_localctx)._Boolean_not = Match(Boolean_not);
				NotifyErrorListeners("missing an expression after " +(((Missing_exp_boolean_notContext)_localctx)._Boolean_not!=null?((Missing_exp_boolean_notContext)_localctx)._Boolean_not.Text:null) + "token");
				}
				break;
			case 23:
				{
				_localctx = new Missing_exp_bitwise_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118; ((Missing_exp_bitwise_notContext)_localctx)._Bitwise_not = Match(Bitwise_not);
				NotifyErrorListeners("missing an expression after " +(((Missing_exp_bitwise_notContext)_localctx)._Bitwise_not!=null?((Missing_exp_bitwise_notContext)_localctx)._Bitwise_not.Text:null) + "token");
				}
				break;
			case 24:
				{
				_localctx = new Missing_exp_before_exponentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; ((Missing_exp_before_exponentContext)_localctx)._Exponent = Match(Exponent);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_exponentContext)_localctx)._Exponent!=null?((Missing_exp_before_exponentContext)_localctx)._Exponent.Text:null) + "token");
				State = 122; expression(36);
				}
				break;
			case 25:
				{
				_localctx = new Unexpected_token_exponentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123; ((Unexpected_token_exponentContext)_localctx)._Exponent = Match(Exponent);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_exponentContext)_localctx)._Exponent!=null?((Unexpected_token_exponentContext)_localctx)._Exponent.Text:null) + "\"");
				}
				break;
			case 26:
				{
				_localctx = new Missing_exp_before_mulContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125; ((Missing_exp_before_mulContext)_localctx)._Multiplicative = Match(Multiplicative);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_mulContext)_localctx)._Multiplicative!=null?((Missing_exp_before_mulContext)_localctx)._Multiplicative.Text:null) + "token");
				State = 127; expression(34);
				}
				break;
			case 27:
				{
				_localctx = new Unexpected_token_mulContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128; ((Unexpected_token_mulContext)_localctx)._Multiplicative = Match(Multiplicative);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_mulContext)_localctx)._Multiplicative!=null?((Unexpected_token_mulContext)_localctx)._Multiplicative.Text:null) + "\"");
				}
				break;
			case 28:
				{
				_localctx = new Missing_exp_before_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130; ((Missing_exp_before_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_addContext)_localctx)._Additive!=null?((Missing_exp_before_addContext)_localctx)._Additive.Text:null) + "token");
				State = 132; expression(32);
				}
				break;
			case 29:
				{
				_localctx = new Unexpected_token_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133; ((Unexpected_token_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_addContext)_localctx)._Additive!=null?((Unexpected_token_addContext)_localctx)._Additive.Text:null) + "\"");
				}
				break;
			case 30:
				{
				_localctx = new Missing_exp_before_bsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 135; ((Missing_exp_before_bsContext)_localctx)._Bitwise_shift = Match(Bitwise_shift);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_bsContext)_localctx)._Bitwise_shift!=null?((Missing_exp_before_bsContext)_localctx)._Bitwise_shift.Text:null) + "token");
				State = 137; expression(30);
				}
				break;
			case 31:
				{
				_localctx = new Unexpected_token_bsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138; ((Unexpected_token_bsContext)_localctx)._Bitwise_shift = Match(Bitwise_shift);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_bsContext)_localctx)._Bitwise_shift!=null?((Unexpected_token_bsContext)_localctx)._Bitwise_shift.Text:null) + "\"");
				}
				break;
			case 32:
				{
				_localctx = new Missing_exp_before_relaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140; ((Missing_exp_before_relaContext)_localctx)._Relational = Match(Relational);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_relaContext)_localctx)._Relational!=null?((Missing_exp_before_relaContext)_localctx)._Relational.Text:null) + "token");
				State = 142; expression(28);
				}
				break;
			case 33:
				{
				_localctx = new Unexpected_token_relaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143; ((Unexpected_token_relaContext)_localctx)._Relational = Match(Relational);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_relaContext)_localctx)._Relational!=null?((Unexpected_token_relaContext)_localctx)._Relational.Text:null) + "\"");
				}
				break;
			case 34:
				{
				_localctx = new Missing_exp_before_eqContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145; ((Missing_exp_before_eqContext)_localctx)._Equalty = Match(Equalty);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_eqContext)_localctx)._Equalty!=null?((Missing_exp_before_eqContext)_localctx)._Equalty.Text:null) + "token");
				State = 147; expression(26);
				}
				break;
			case 35:
				{
				_localctx = new Unexpected_token_eqContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148; ((Unexpected_token_eqContext)_localctx)._Equalty = Match(Equalty);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_eqContext)_localctx)._Equalty!=null?((Unexpected_token_eqContext)_localctx)._Equalty.Text:null) + "\"");
				}
				break;
			case 36:
				{
				_localctx = new Missing_exp_before_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150; ((Missing_exp_before_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_addContext)_localctx)._Additive!=null?((Missing_exp_before_addContext)_localctx)._Additive.Text:null) + "token");
				State = 152; expression(24);
				}
				break;
			case 37:
				{
				_localctx = new Unexpected_token_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153; ((Unexpected_token_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_addContext)_localctx)._Additive!=null?((Unexpected_token_addContext)_localctx)._Additive.Text:null) + "\"");
				}
				break;
			case 38:
				{
				_localctx = new Missing_exp_before_opContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				((Missing_exp_before_opContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Bitwise_operators || _la==Bitwise_Or) ) {
					((Missing_exp_before_opContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_opContext)_localctx).op!=null?((Missing_exp_before_opContext)_localctx).op.Text:null) + "token");
				State = 157; expression(22);
				}
				break;
			case 39:
				{
				_localctx = new Unexpected_token_opContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158;
				((Unexpected_token_opContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Bitwise_operators || _la==Bitwise_Or) ) {
					((Unexpected_token_opContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_opContext)_localctx).op!=null?((Unexpected_token_opContext)_localctx).op.Text:null) + "\"");
				}
				break;
			case 40:
				{
				_localctx = new Missing_exp_before_boolopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160; ((Missing_exp_before_boolopContext)_localctx)._Boolean_operator = Match(Boolean_operator);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_boolopContext)_localctx)._Boolean_operator!=null?((Missing_exp_before_boolopContext)_localctx)._Boolean_operator.Text:null) + "token");
				State = 162; expression(20);
				}
				break;
			case 41:
				{
				_localctx = new Unexpected_token_boolopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163; ((Unexpected_token_boolopContext)_localctx)._Boolean_operator = Match(Boolean_operator);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_boolopContext)_localctx)._Boolean_operator!=null?((Unexpected_token_boolopContext)_localctx)._Boolean_operator.Text:null) + "\"");
				}
				break;
			case 42:
				{
				_localctx = new Missing_exp_before_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165; ((Missing_exp_before_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("missing an expression before " +(((Missing_exp_before_addContext)_localctx)._Additive!=null?((Missing_exp_before_addContext)_localctx)._Additive.Text:null) + "token");
				State = 167; expression(18);
				}
				break;
			case 43:
				{
				_localctx = new Unexpected_token_addContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168; ((Unexpected_token_addContext)_localctx)._Additive = Match(Additive);
				NotifyErrorListeners("unexpected token: \"" + (((Unexpected_token_addContext)_localctx)._Additive!=null?((Unexpected_token_addContext)_localctx)._Additive.Text:null) + "\"");
				}
				break;
			case 44:
				{
				_localctx = new Misssing_expression_after_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 170; Match(Id);
				State = 171; ((Misssing_expression_after_assignmentContext)_localctx)._Assignment = Match(Assignment);
				NotifyErrorListeners("expecting an expression after \""+(((Misssing_expression_after_assignmentContext)_localctx)._Assignment!=null?((Misssing_expression_after_assignmentContext)_localctx)._Assignment.Text:null)+" \" token");
				}
				break;
			case 45:
				{
				_localctx = new Missing_exp_before_hash_pairContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173; ((Missing_exp_before_hash_pairContext)_localctx)._Hash_pair = Match(Hash_pair);
				NotifyErrorListeners("unexpected \"" +(((Missing_exp_before_hash_pairContext)_localctx)._Hash_pair!=null?((Missing_exp_before_hash_pairContext)_localctx)._Hash_pair.Text:null) + "\" token");
				State = 175; expression(13);
				}
				break;
			case 46:
				{
				_localctx = new Missing_exp_after_asContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176; ((Missing_exp_after_asContext)_localctx)._Assignment = Match(Assignment);
				State = 177; expression(4);
				NotifyErrorListeners("missing an identifier before \""+ (((Missing_exp_after_asContext)_localctx)._Assignment!=null?((Missing_exp_after_asContext)_localctx)._Assignment.Text:null) + "\" token");
				}
				break;
			case 47:
				{
				_localctx = new Unexpected_token_assContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Id) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 181; ((Unexpected_token_assContext)_localctx)._Assignment = Match(Assignment);
				State = 183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 182; expression(0);
					}
					break;
				}
				NotifyErrorListeners("unexpected token \""+ (((Unexpected_token_assContext)_localctx)._Assignment!=null?((Unexpected_token_assContext)_localctx)._Assignment.Text:null) + "\" token");
				}
				break;
			case 48:
				{
				_localctx = new DotxContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186; Match(Dot);
				NotifyErrorListeners("unexpected token \".\"");
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 270;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new ExponentsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(Context, 59))) throw new FailedPredicateException(this, "Precpred(Context, 59)");
						State = 191; ((ExponentsContext)_localctx)._Exponent = Match(Exponent);
						State = 192; expression(60);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(Context, 58))) throw new FailedPredicateException(this, "Precpred(Context, 58)");
						State = 194; ((MultiplicationsContext)_localctx)._Multiplicative = Match(Multiplicative);
						State = 195; expression(59);
						}
						break;
					case 3:
						{
						_localctx = new AdditivesContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 57))) throw new FailedPredicateException(this, "Precpred(Context, 57)");
						State = 197; ((AdditivesContext)_localctx)._Additive = Match(Additive);
						State = 198; expression(58);
						}
						break;
					case 4:
						{
						_localctx = new Bitwise_shiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 56))) throw new FailedPredicateException(this, "Precpred(Context, 56)");
						State = 200; ((Bitwise_shiftContext)_localctx)._Bitwise_shift = Match(Bitwise_shift);
						State = 201; expression(57);
						}
						break;
					case 5:
						{
						_localctx = new RelationalsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 55))) throw new FailedPredicateException(this, "Precpred(Context, 55)");
						State = 203; ((RelationalsContext)_localctx)._Relational = Match(Relational);
						State = 204; expression(56);
						}
						break;
					case 6:
						{
						_localctx = new EqualtiesContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 205;
						if (!(Precpred(Context, 54))) throw new FailedPredicateException(this, "Precpred(Context, 54)");
						State = 206; ((EqualtiesContext)_localctx)._Equalty = Match(Equalty);
						State = 207; expression(55);
						}
						break;
					case 7:
						{
						_localctx = new Bitwise_operatorsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 53))) throw new FailedPredicateException(this, "Precpred(Context, 53)");
						State = 209;
						((Bitwise_operatorsContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Bitwise_operators || _la==Bitwise_Or) ) {
							((Bitwise_operatorsContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 210; expression(54);
						}
						break;
					case 8:
						{
						_localctx = new Boolean_operatorsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 52))) throw new FailedPredicateException(this, "Precpred(Context, 52)");
						State = 212; ((Boolean_operatorsContext)_localctx)._Boolean_operator = Match(Boolean_operator);
						State = 213; expression(53);
						}
						break;
					case 9:
						{
						_localctx = new Member_settingsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(Context, 51))) throw new FailedPredicateException(this, "Precpred(Context, 51)");
						State = 215; ((Member_settingsContext)_localctx)._Square_openPathen = Match(Square_openPathen);
						State = 216; expression(0);
						State = 217; Match(Square_closePathen);
						State = 218; ((Member_settingsContext)_localctx)._Assignment = Match(Assignment);
						State = 219; expression(52);
						}
						break;
					case 10:
						{
						_localctx = new Member_accessesContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 63))) throw new FailedPredicateException(this, "Precpred(Context, 63)");
						State = 222; ((Member_accessesContext)_localctx)._Square_openPathen = Match(Square_openPathen);
						State = 223; expression(0);
						State = 224; Match(Square_closePathen);
						}
						break;
					case 11:
						{
						_localctx = new Error_missing_expression_or_close_pathen_member_accessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 227; ((Error_missing_expression_or_close_pathen_member_accessContext)_localctx)._Square_openPathen = Match(Square_openPathen);
						State = 230;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 228; expression(0);
							}
							break;
						case 2:
							{

							              NotifyErrorListeners("expecting an expression after " + (((Error_missing_expression_or_close_pathen_member_accessContext)_localctx)._Square_openPathen!=null?((Error_missing_expression_or_close_pathen_member_accessContext)_localctx)._Square_openPathen.Text:null) +" token");
							}
							break;
						}

						                  NotifyErrorListeners("expecting \"]\"");
						              
						}
						break;
					case 12:
						{
						_localctx = new Misssing_expression_after_member_settingContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 234; ((Misssing_expression_after_member_settingContext)_localctx)._Square_openPathen = Match(Square_openPathen);
						State = 235; expression(0);
						State = 236; Match(Square_closePathen);
						State = 237; ((Misssing_expression_after_member_settingContext)_localctx)._Assignment = Match(Assignment);

						              NotifyErrorListeners("expecting an expression after \""+(((Misssing_expression_after_member_settingContext)_localctx)._Assignment!=null?((Misssing_expression_after_member_settingContext)_localctx)._Assignment.Text:null)+" \" token");
						              
						}
						break;
					case 13:
						{
						_localctx = new Out_of_hash_pairContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 240;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 241; ((Out_of_hash_pairContext)_localctx)._Hash_pair = Match(Hash_pair);
						NotifyErrorListeners("unexpected \"" +(((Out_of_hash_pairContext)_localctx)._Hash_pair!=null?((Out_of_hash_pairContext)_localctx)._Hash_pair.Text:null) + "\" token");
						}
						break;
					case 14:
						{
						_localctx = new Missing_exp_after_expContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 243;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 244; ((Missing_exp_after_expContext)_localctx)._Exponent = Match(Exponent);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_expContext)_localctx)._Exponent!=null?((Missing_exp_after_expContext)_localctx)._Exponent.Text:null) + "\" token");
						}
						break;
					case 15:
						{
						_localctx = new Missing_exp_after_mulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 246;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 247; ((Missing_exp_after_mulContext)_localctx)._Multiplicative = Match(Multiplicative);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_mulContext)_localctx)._Multiplicative!=null?((Missing_exp_after_mulContext)_localctx)._Multiplicative.Text:null) + "\" token");
						}
						break;
					case 16:
						{
						_localctx = new Missing_exp_after_adContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 249;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 250; ((Missing_exp_after_adContext)_localctx)._Additive = Match(Additive);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_adContext)_localctx)._Additive!=null?((Missing_exp_after_adContext)_localctx)._Additive.Text:null) + "\" token");
						}
						break;
					case 17:
						{
						_localctx = new Missing_exp_after_bshContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 252;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 253; ((Missing_exp_after_bshContext)_localctx)._Bitwise_shift = Match(Bitwise_shift);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_bshContext)_localctx)._Bitwise_shift!=null?((Missing_exp_after_bshContext)_localctx)._Bitwise_shift.Text:null) + "\" token");
						}
						break;
					case 18:
						{
						_localctx = new Missing_exp_after_relaContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 255;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 256; ((Missing_exp_after_relaContext)_localctx)._Relational = Match(Relational);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_relaContext)_localctx)._Relational!=null?((Missing_exp_after_relaContext)_localctx)._Relational.Text:null) + "\" token");
						}
						break;
					case 19:
						{
						_localctx = new Missing_exp_after_eqContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 258;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 259; ((Missing_exp_after_eqContext)_localctx)._Equalty = Match(Equalty);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_eqContext)_localctx)._Equalty!=null?((Missing_exp_after_eqContext)_localctx)._Equalty.Text:null) + "\" token");
						}
						break;
					case 20:
						{
						_localctx = new Missing_exp_after_opContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 261;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 262;
						((Missing_exp_after_opContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Bitwise_operators || _la==Bitwise_Or) ) {
							((Missing_exp_after_opContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_opContext)_localctx).op!=null?((Missing_exp_after_opContext)_localctx).op.Text:null) + "\" token");
						}
						break;
					case 21:
						{
						_localctx = new Missing_exp_after_bopContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 264;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 265; ((Missing_exp_after_bopContext)_localctx)._Boolean_operator = Match(Boolean_operator);
						NotifyErrorListeners("missing an expression after \""+ (((Missing_exp_after_bopContext)_localctx)._Boolean_operator!=null?((Missing_exp_after_bopContext)_localctx)._Boolean_operator.Text:null) + "\" token");
						}
						break;
					case 22:
						{
						_localctx = new DotxContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 267;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 268; Match(Dot);
						NotifyErrorListeners("unexpected token \".\"");
						}
						break;
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Hash_key_valueContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public ITerminalNode Hash_pair() { return GetToken(langParser.Hash_pair, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Hash_key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_key_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterHash_key_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitHash_key_value(this);
		}
	}

	[RuleVersion(0)]
	public Hash_key_valueContext hash_key_value() {
		Hash_key_valueContext _localctx = new Hash_key_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_hash_key_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(Id);
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 276; Match(Hash_pair);
				}
				break;
			case 2:
				{

				NotifyErrorListeners("expecting \":\" or \"=>\"");

				}
				break;
			}
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 280; expression(0);
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("expecting an expression");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_functionContext : ParserRuleContext {
		public int begin;
		public int end;
		public IToken idx;
		public IToken member_name;
		public IToken _Dot;
		public ITerminalNode Dot() { return GetToken(langParser.Dot, 0); }
		public ITerminalNode[] Id() { return GetTokens(langParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(langParser.Id, i);
		}
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public Member_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterMember_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitMember_function(this);
		}
	}

	[RuleVersion(0)]
	public Member_functionContext member_function() {
		Member_functionContext _localctx = new Member_functionContext(Context, State);
		EnterRule(_localctx, 12, RULE_member_function);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Id:
					{
					{
					State = 284; _localctx.idx = Match(Id);
					}
					}
					break;
				case Hash_openPathen:
					{
					State = 285; hash();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 288; Match(Dot);
				State = 289; _localctx.member_name = Match(Id);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Id:
					{
					State = 290; Match(Id);
					}
					break;
				case Hash_openPathen:
					{
					State = 291; hash();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 294; _localctx._Dot = Match(Dot);
				 NotifyErrorListeners("Missing a key after "+(_localctx._Dot!=null?_localctx._Dot.Text:null) + "\" token"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public BaseFunction fn = null;
		public bool pre_ele = false;
		public IToken _Comma;
		public ITerminalNode OpenPathen() { return GetToken(langParser.OpenPathen, 0); }
		public ITerminalNode ClosePathen() { return GetToken(langParser.ClosePathen, 0); }
		public Member_functionContext member_function() {
			return GetRuleContext<Member_functionContext>(0);
		}
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public Function_decContext function_dec() {
			return GetRuleContext<Function_decContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(langParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(langParser.Comma, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 298; member_function();
				}
				break;
			case 2:
				{
				State = 299; Match(Id);
				}
				break;
			case 3:
				{
				State = 300; function_dec();
				}
				break;
			}
			State = 303; Match(OpenPathen);
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 304; expression(0);
				_localctx.pre_ele = true;
				}
				break;
			}
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 309; _localctx._Comma = Match(Comma);

				    if(!_localctx.pre_ele)
				        NotifyErrorListeners("missing an expression before \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");
				    _localctx.pre_ele = true;

				State = 315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 311; expression(0);
					_localctx.pre_ele = true;
					}
					break;
				case 2:
					{

					    _localctx.pre_ele = false;
					    NotifyErrorListeners("missing an expression after \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");

					}
					break;
				}
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 322; Match(ClosePathen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public bool pre_ele = false;
		public IToken _Comma;
		public ITerminalNode Print() { return GetToken(langParser.Print, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(langParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(langParser.Comma, i);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 16, RULE_print);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(Print);
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 325; expression(0);
				_localctx.pre_ele = true;
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("You can not print nothing to the console");

				}
				break;
			}
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331; _localctx._Comma = Match(Comma);

					    if(!_localctx.pre_ele)
					        NotifyErrorListeners("missing an expression before \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");
					    _localctx.pre_ele = true;

					State = 337;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						State = 333; expression(0);
						_localctx.pre_ele = true;
						}
						break;
					case 2:
						{

						    _localctx.pre_ele = false;
						    NotifyErrorListeners("missing an expression after \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");

						}
						break;
					}
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashContext : ParserRuleContext {
		public IToken _Comma;
		public ITerminalNode Hash_openPathen() { return GetToken(langParser.Hash_openPathen, 0); }
		public ITerminalNode Hash_closePathen() { return GetToken(langParser.Hash_closePathen, 0); }
		public Hash_key_valueContext[] hash_key_value() {
			return GetRuleContexts<Hash_key_valueContext>();
		}
		public Hash_key_valueContext hash_key_value(int i) {
			return GetRuleContext<Hash_key_valueContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(langParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(langParser.Comma, i);
		}
		public HashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitHash(this);
		}
	}

	[RuleVersion(0)]
	public HashContext hash() {
		HashContext _localctx = new HashContext(Context, State);
		EnterRule(_localctx, 18, RULE_hash);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(Hash_openPathen);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Id) {
				{
				State = 345; hash_key_value();
				}
			}

			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 348; _localctx._Comma = Match(Comma);
				State = 351;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Id:
					{
					State = 349; hash_key_value();
					}
					break;
				case Hash_closePathen:
				case Comma:
					{

					    NotifyErrorListeners("missing an hash <key => value> pair after \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 358; Match(Hash_closePathen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public bool pre_ele = false;
		public IToken _Comma;
		public ITerminalNode Square_openPathen() { return GetToken(langParser.Square_openPathen, 0); }
		public ITerminalNode Square_closePathen() { return GetToken(langParser.Square_closePathen, 0); }
		public Array_elementContext[] array_element() {
			return GetRuleContexts<Array_elementContext>();
		}
		public Array_elementContext array_element(int i) {
			return GetRuleContext<Array_elementContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(langParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(langParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 20, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(Square_openPathen);
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 361; array_element();
				_localctx.pre_ele = true;
				}
				break;
			}
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 366; _localctx._Comma = Match(Comma);

					    if(!_localctx.pre_ele)
					        NotifyErrorListeners("missing an expression before \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");
					    _localctx.pre_ele = true;

					State = 372;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 368; array_element();
						_localctx.pre_ele = true;
						}
						break;
					case 2:
						{

						    _localctx.pre_ele = false;
						    NotifyErrorListeners("missing an expression after \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");

						}
						break;
					}
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 379; Match(Square_closePathen);
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("expecting \"]\" token");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FltContext : ParserRuleContext {
		public ITerminalNode Float() { return GetToken(langParser.Float, 0); }
		public FltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFlt(this);
		}
	}

	[RuleVersion(0)]
	public FltContext flt() {
		FltContext _localctx = new FltContext(Context, State);
		EnterRule(_localctx, 22, RULE_flt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public int value;
		public IToken _Hexa;
		public IToken _Octal;
		public IToken _Binary;
		public IToken _Decimal;
		public ITerminalNode Hexa() { return GetToken(langParser.Hexa, 0); }
		public ITerminalNode Octal() { return GetToken(langParser.Octal, 0); }
		public ITerminalNode Binary() { return GetToken(langParser.Binary, 0); }
		public ITerminalNode Decimal() { return GetToken(langParser.Decimal, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hexa:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385; _localctx._Hexa = Match(Hexa);
				 _localctx.value =  Convert.ToInt32((_localctx._Hexa!=null?_localctx._Hexa.Text:null),16); 
				}
				break;
			case Octal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; _localctx._Octal = Match(Octal);
				 _localctx.value =  Convert.ToInt32((_localctx._Octal!=null?_localctx._Octal.Text:null),8); 
				}
				break;
			case Binary:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; _localctx._Binary = Match(Binary);
				 _localctx.value =  Convert.ToInt32((_localctx._Binary!=null?_localctx._Binary.Text:null),2); 
				}
				break;
			case Decimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; _localctx._Decimal = Match(Decimal);
				 _localctx.value =  Convert.ToInt32((_localctx._Decimal!=null?_localctx._Decimal.Text:null),10); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruefalseContext : ParserRuleContext {
		public ITerminalNode Boolean() { return GetToken(langParser.Boolean, 0); }
		public TruefalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truefalse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterTruefalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitTruefalse(this);
		}
	}

	[RuleVersion(0)]
	public TruefalseContext truefalse() {
		TruefalseContext _localctx = new TruefalseContext(Context, State);
		EnterRule(_localctx, 26, RULE_truefalse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(Boolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NilContext : ParserRuleContext {
		public ITerminalNode Nil() { return GetToken(langParser.Nil, 0); }
		public NilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nil; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterNil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitNil(this);
		}
	}

	[RuleVersion(0)]
	public NilContext nil() {
		NilContext _localctx = new NilContext(Context, State);
		EnterRule(_localctx, 28, RULE_nil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(Nil);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] String() { return GetTokens(langParser.String); }
		public ITerminalNode String(int i) {
			return GetToken(langParser.String, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 30, RULE_string);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(String);
			State = 403;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 400; Match(String);
					}
					} 
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_decContext : ParserRuleContext {
		public bool pre_ele = false;
		public IToken _Comma;
		public ITerminalNode Do() { return GetToken(langParser.Do, 0); }
		public ITerminalNode End() { return GetToken(langParser.End, 0); }
		public ITerminalNode[] Id() { return GetTokens(langParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(langParser.Id, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(langParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(langParser.Comma, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statContext[] return_stat() {
			return GetRuleContexts<Return_statContext>();
		}
		public Return_statContext return_stat(int i) {
			return GetRuleContext<Return_statContext>(i);
		}
		public ITerminalNode[] Dot_comma() { return GetTokens(langParser.Dot_comma); }
		public ITerminalNode Dot_comma(int i) {
			return GetToken(langParser.Dot_comma, i);
		}
		public ITerminalNode[] NewLine() { return GetTokens(langParser.NewLine); }
		public ITerminalNode NewLine(int i) {
			return GetToken(langParser.NewLine, i);
		}
		public Function_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_dec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterFunction_dec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitFunction_dec(this);
		}
	}

	[RuleVersion(0)]
	public Function_decContext function_dec() {
		Function_decContext _localctx = new Function_decContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_dec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(Do);
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 407; Match(Id);
				_localctx.pre_ele = true;
				}
				break;
			}
			State = 420;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 411; _localctx._Comma = Match(Comma);

					    if(!_localctx.pre_ele)
					        NotifyErrorListeners("missing an identifier before \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");
					    _localctx.pre_ele = true;

					State = 416;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 413; Match(Id);
						_localctx.pre_ele = true;
						}
						break;
					case 2:
						{

						    _localctx.pre_ele = false;
						    NotifyErrorListeners("missing an identifier after \"" + (_localctx._Comma!=null?_localctx._Comma.Text:null) +"\" token");

						}
						break;
					}
					}
					} 
				}
				State = 422;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			function_nested_level++;
			State = 431;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 429;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						State = 424; line();
						}
						break;
					case 2:
						{
						{
						State = 425;
						if (!(function_nested_level>0)) throw new FailedPredicateException(this, "function_nested_level>0");
						State = 426; return_stat();
						State = 427;
						_la = TokenStream.LA(1);
						if ( !(_la==Dot_comma || _la==NewLine) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					}
					} 
				}
				State = 433;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 434; expression(0);
				}
				break;
			case 2:
				{
				State = 435;
				if (!(function_nested_level>0)) throw new FailedPredicateException(this, "function_nested_level>0");
				State = 436; return_stat();
				}
				break;
			}
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 439; Match(End);
				function_nested_level--;
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("expecting \"end\" keyword");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declerationContext : ParserRuleContext {
		public IToken _Var;
		public IToken _Assignment;
		public ITerminalNode Var() { return GetToken(langParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(langParser.Id, 0); }
		public ITerminalNode Assignment() { return GetToken(langParser.Assignment, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_decleration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterVariable_decleration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitVariable_decleration(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declerationContext variable_decleration() {
		Variable_declerationContext _localctx = new Variable_declerationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variable_decleration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; _localctx._Var = Match(Var);
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 445; Match(Id);
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("missing an identifier after \""+ (_localctx._Var!=null?_localctx._Var.Text:null) +"\" keyword");

				}
				break;
			}
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 449; _localctx._Assignment = Match(Assignment);
				State = 452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 450; expression(0);
					}
					break;
				case 2:
					{

					    NotifyErrorListeners("missing an expression after \""+ (_localctx._Assignment!=null?_localctx._Assignment.Text:null) +"\" token");

					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Last_expression_in_whileContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Stop_statContext stop_stat() {
			return GetRuleContext<Stop_statContext>(0);
		}
		public Break_statContext break_stat() {
			return GetRuleContext<Break_statContext>(0);
		}
		public Continue_statContext continue_stat() {
			return GetRuleContext<Continue_statContext>(0);
		}
		public Return_statContext return_stat() {
			return GetRuleContext<Return_statContext>(0);
		}
		public Last_expression_in_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_last_expression_in_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterLast_expression_in_while(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitLast_expression_in_while(this);
		}
	}

	[RuleVersion(0)]
	public Last_expression_in_whileContext last_expression_in_while() {
		Last_expression_in_whileContext _localctx = new Last_expression_in_whileContext(Context, State);
		EnterRule(_localctx, 36, RULE_last_expression_in_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 456; expression(0);
				}
				break;
			case 2:
				{
				State = 457; stop_stat();
				}
				break;
			case 3:
				{
				State = 458; break_stat();
				}
				break;
			case 4:
				{
				State = 459; continue_stat();
				}
				break;
			case 5:
				{
				State = 460; return_stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statContext : ParserRuleContext {
		public int begin;
		public int end;
		public List<int> breaks = new List<int>();
		public List<int> @continue = new List<int>();
		public IToken _While;
		public ITerminalNode While() { return GetToken(langParser.While, 0); }
		public ExpsContext exps() {
			return GetRuleContext<ExpsContext>(0);
		}
		public ITerminalNode Next() { return GetToken(langParser.Next, 0); }
		public ITerminalNode[] NewLine() { return GetTokens(langParser.NewLine); }
		public ITerminalNode NewLine(int i) {
			return GetToken(langParser.NewLine, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public Last_expression_in_whileContext last_expression_in_while() {
			return GetRuleContext<Last_expression_in_whileContext>(0);
		}
		public ITerminalNode[] Dot_comma() { return GetTokens(langParser.Dot_comma); }
		public ITerminalNode Dot_comma(int i) {
			return GetToken(langParser.Dot_comma, i);
		}
		public Stop_statContext[] stop_stat() {
			return GetRuleContexts<Stop_statContext>();
		}
		public Stop_statContext stop_stat(int i) {
			return GetRuleContext<Stop_statContext>(i);
		}
		public Break_statContext[] break_stat() {
			return GetRuleContexts<Break_statContext>();
		}
		public Break_statContext break_stat(int i) {
			return GetRuleContext<Break_statContext>(i);
		}
		public Continue_statContext[] continue_stat() {
			return GetRuleContexts<Continue_statContext>();
		}
		public Continue_statContext continue_stat(int i) {
			return GetRuleContext<Continue_statContext>(i);
		}
		public Return_statContext[] return_stat() {
			return GetRuleContexts<Return_statContext>();
		}
		public Return_statContext return_stat(int i) {
			return GetRuleContext<Return_statContext>(i);
		}
		public While_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterWhile_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitWhile_stat(this);
		}
	}

	[RuleVersion(0)]
	public While_statContext while_stat() {
		While_statContext _localctx = new While_statContext(Context, State);
		EnterRule(_localctx, 38, RULE_while_stat);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; _localctx._While = Match(While);
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 464; exps();
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("missing an expression after \""+ (_localctx._While!=null?_localctx._While.Text:null) +"\" token");

				}
				break;
			}
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 468; Match(NewLine);
				}
				break;
			}
			this.stack_of_while.Push(_localctx as langParser.While_statContext);
			State = 483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 481;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						State = 472; line();
						}
						break;
					case 2:
						{
						{
						State = 477;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
						case 1:
							{
							State = 473; stop_stat();
							}
							break;
						case 2:
							{
							State = 474; break_stat();
							}
							break;
						case 3:
							{
							State = 475; continue_stat();
							}
							break;
						case 4:
							{
							State = 476; return_stat();
							}
							break;
						}
						State = 479;
						_la = TokenStream.LA(1);
						if ( !(_la==Dot_comma || _la==NewLine) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					}
					} 
				}
				State = 485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 486; last_expression_in_while();
				}
				break;
			}
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 489; Match(Next);
				this.stack_of_while.Pop();
				}
				break;
			case 2:
				{

				    NotifyErrorListeners("missing next keyword");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Last_expression_in_ifContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Stop_statContext stop_stat() {
			return GetRuleContext<Stop_statContext>(0);
		}
		public Break_statContext break_stat() {
			return GetRuleContext<Break_statContext>(0);
		}
		public Continue_statContext continue_stat() {
			return GetRuleContext<Continue_statContext>(0);
		}
		public Return_statContext return_stat() {
			return GetRuleContext<Return_statContext>(0);
		}
		public Last_expression_in_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_last_expression_in_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterLast_expression_in_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitLast_expression_in_if(this);
		}
	}

	[RuleVersion(0)]
	public Last_expression_in_ifContext last_expression_in_if() {
		Last_expression_in_ifContext _localctx = new Last_expression_in_ifContext(Context, State);
		EnterRule(_localctx, 40, RULE_last_expression_in_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 494; expression(0);
				}
				break;
			case 2:
				{
				State = 495; stop_stat();
				}
				break;
			case 3:
				{
				State = 496; break_stat();
				}
				break;
			case 4:
				{
				State = 497; continue_stat();
				}
				break;
			case 5:
				{
				State = 498; return_stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		public List<int> jumps = new List<int>();
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public ITerminalNode End() { return GetToken(langParser.End, 0); }
		public Else_ifContext[] else_if() {
			return GetRuleContexts<Else_ifContext>();
		}
		public Else_ifContext else_if(int i) {
			return GetRuleContext<Else_ifContext>(i);
		}
		public ElsexContext elsex() {
			return GetRuleContext<ElsexContext>(0);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_stat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; iif();
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 502; else_if();
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 508; elsex();
				}
				break;
			}
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 511; Match(End);
				this.stack_of_if.Pop();
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing end keyword");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statContext : ParserRuleContext {
		public IToken _Return;
		public ITerminalNode Return() { return GetToken(langParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterReturn_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitReturn_stat(this);
		}
	}

	[RuleVersion(0)]
	public Return_statContext return_stat() {
		Return_statContext _localctx = new Return_statContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			if (!(function_nested_level>0)) throw new FailedPredicateException(this, "function_nested_level>0");
			State = 517; _localctx._Return = Match(Return);
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 518; expression(0);
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing an expression after \""+ (_localctx._Return!=null?_localctx._Return.Text:null) +"\" token");

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stop_statContext : ParserRuleContext {
		public langParser.While_statContext my_while;
		public IToken _Stop;
		public ITerminalNode Stop() { return GetToken(langParser.Stop, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Stop_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterStop_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitStop_stat(this);
		}
	}

	[RuleVersion(0)]
	public Stop_statContext stop_stat() {
		Stop_statContext _localctx = new Stop_statContext(Context, State);
		EnterRule(_localctx, 46, RULE_stop_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			if (!( Convert.ToBoolean(this.stack_of_while.Count))) throw new FailedPredicateException(this, " Convert.ToBoolean(this.stack_of_while.Count)");
			State = 523; _localctx._Stop = Match(Stop);
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 524; expression(0);
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing an expression after \""+ (_localctx._Stop!=null?_localctx._Stop.Text:null) +"\" token");

				}
				break;
			}

			    _localctx.my_while =  this.stack_of_while.Peek();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statContext : ParserRuleContext {
		public langParser.If_statContext my_if;
		public IToken _Break;
		public ITerminalNode Break() { return GetToken(langParser.Break, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Break_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterBreak_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitBreak_stat(this);
		}
	}

	[RuleVersion(0)]
	public Break_statContext break_stat() {
		Break_statContext _localctx = new Break_statContext(Context, State);
		EnterRule(_localctx, 48, RULE_break_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			if (!( Convert.ToBoolean(this.stack_of_if.Count))) throw new FailedPredicateException(this, " Convert.ToBoolean(this.stack_of_if.Count)");
			State = 531; _localctx._Break = Match(Break);
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 532; expression(0);
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing an expression after \""+ (_localctx._Break!=null?_localctx._Break.Text:null) +"\" token");

				}
				break;
			}

			    _localctx.my_if =  this.stack_of_if.Peek();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statContext : ParserRuleContext {
		public langParser.While_statContext my_while;
		public ITerminalNode Continue() { return GetToken(langParser.Continue, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Continue_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterContinue_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitContinue_stat(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statContext continue_stat() {
		Continue_statContext _localctx = new Continue_statContext(Context, State);
		EnterRule(_localctx, 50, RULE_continue_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			if (!( Convert.ToBoolean(this.stack_of_while.Count))) throw new FailedPredicateException(this, " Convert.ToBoolean(this.stack_of_while.Count)");
			State = 539; Match(Continue);
			State = 543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 540; expression(0);

				     NotifyErrorListeners("continue keyword does not need any following expression");

				}
				break;
			}

			    _localctx.my_while =  this.stack_of_while.Peek();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : ParserRuleContext {
		public int run_inst_position;
		public IToken _If;
		public ITerminalNode If() { return GetToken(langParser.If, 0); }
		public ExpsContext exps() {
			return GetRuleContext<ExpsContext>(0);
		}
		public ITerminalNode[] NewLine() { return GetTokens(langParser.NewLine); }
		public ITerminalNode NewLine(int i) {
			return GetToken(langParser.NewLine, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public Last_expression_in_ifContext last_expression_in_if() {
			return GetRuleContext<Last_expression_in_ifContext>(0);
		}
		public ITerminalNode[] Dot_comma() { return GetTokens(langParser.Dot_comma); }
		public ITerminalNode Dot_comma(int i) {
			return GetToken(langParser.Dot_comma, i);
		}
		public Stop_statContext[] stop_stat() {
			return GetRuleContexts<Stop_statContext>();
		}
		public Stop_statContext stop_stat(int i) {
			return GetRuleContext<Stop_statContext>(i);
		}
		public Break_statContext[] break_stat() {
			return GetRuleContexts<Break_statContext>();
		}
		public Break_statContext break_stat(int i) {
			return GetRuleContext<Break_statContext>(i);
		}
		public Continue_statContext[] continue_stat() {
			return GetRuleContexts<Continue_statContext>();
		}
		public Continue_statContext continue_stat(int i) {
			return GetRuleContext<Continue_statContext>(i);
		}
		public Return_statContext[] return_stat() {
			return GetRuleContexts<Return_statContext>();
		}
		public Return_statContext return_stat(int i) {
			return GetRuleContext<Return_statContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(Context, State);
		EnterRule(_localctx, 52, RULE_iif);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; _localctx._If = Match(If);
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 548; exps();
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing an expression after \""+ (_localctx._If!=null?_localctx._If.Text:null) +"\" token");

				}
				break;
			}
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 552; Match(NewLine);
				}
				break;
			}
			this.stack_of_if.Push(_localctx.Parent as langParser.If_statContext);
			State = 567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 565;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						State = 556; line();
						}
						break;
					case 2:
						{
						{
						State = 561;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
						case 1:
							{
							State = 557; stop_stat();
							}
							break;
						case 2:
							{
							State = 558; break_stat();
							}
							break;
						case 3:
							{
							State = 559; continue_stat();
							}
							break;
						case 4:
							{
							State = 560; return_stat();
							}
							break;
						}
						State = 563;
						_la = TokenStream.LA(1);
						if ( !(_la==Dot_comma || _la==NewLine) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					}
					} 
				}
				State = 569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 570; last_expression_in_if();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_ifContext : ParserRuleContext {
		public int run_inst_position;
		public IToken _ElseIF;
		public ITerminalNode ElseIF() { return GetToken(langParser.ElseIF, 0); }
		public ExpsContext exps() {
			return GetRuleContext<ExpsContext>(0);
		}
		public ITerminalNode[] NewLine() { return GetTokens(langParser.NewLine); }
		public ITerminalNode NewLine(int i) {
			return GetToken(langParser.NewLine, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public Last_expression_in_ifContext last_expression_in_if() {
			return GetRuleContext<Last_expression_in_ifContext>(0);
		}
		public ITerminalNode[] Dot_comma() { return GetTokens(langParser.Dot_comma); }
		public ITerminalNode Dot_comma(int i) {
			return GetToken(langParser.Dot_comma, i);
		}
		public Stop_statContext[] stop_stat() {
			return GetRuleContexts<Stop_statContext>();
		}
		public Stop_statContext stop_stat(int i) {
			return GetRuleContext<Stop_statContext>(i);
		}
		public Break_statContext[] break_stat() {
			return GetRuleContexts<Break_statContext>();
		}
		public Break_statContext break_stat(int i) {
			return GetRuleContext<Break_statContext>(i);
		}
		public Continue_statContext[] continue_stat() {
			return GetRuleContexts<Continue_statContext>();
		}
		public Continue_statContext continue_stat(int i) {
			return GetRuleContext<Continue_statContext>(i);
		}
		public Return_statContext[] return_stat() {
			return GetRuleContexts<Return_statContext>();
		}
		public Return_statContext return_stat(int i) {
			return GetRuleContext<Return_statContext>(i);
		}
		public Else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterElse_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitElse_if(this);
		}
	}

	[RuleVersion(0)]
	public Else_ifContext else_if() {
		Else_ifContext _localctx = new Else_ifContext(Context, State);
		EnterRule(_localctx, 54, RULE_else_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 573; _localctx._ElseIF = Match(ElseIF);
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 574; exps();
				}
				break;
			case 2:
				{

				     NotifyErrorListeners("missing an expression after \""+ (_localctx._ElseIF!=null?_localctx._ElseIF.Text:null) +"\" token");

				}
				break;
			}
			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 578; Match(NewLine);
				}
				break;
			}
			State = 592;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 590;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 581; line();
						}
						break;
					case 2:
						{
						{
						State = 586;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
						case 1:
							{
							State = 582; stop_stat();
							}
							break;
						case 2:
							{
							State = 583; break_stat();
							}
							break;
						case 3:
							{
							State = 584; continue_stat();
							}
							break;
						case 4:
							{
							State = 585; return_stat();
							}
							break;
						}
						State = 588;
						_la = TokenStream.LA(1);
						if ( !(_la==Dot_comma || _la==NewLine) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					}
					} 
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 595; last_expression_in_if();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsexContext : ParserRuleContext {
		public int run_inst_position;
		public ITerminalNode Else() { return GetToken(langParser.Else, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public Last_expression_in_ifContext last_expression_in_if() {
			return GetRuleContext<Last_expression_in_ifContext>(0);
		}
		public ITerminalNode[] Dot_comma() { return GetTokens(langParser.Dot_comma); }
		public ITerminalNode Dot_comma(int i) {
			return GetToken(langParser.Dot_comma, i);
		}
		public ITerminalNode[] NewLine() { return GetTokens(langParser.NewLine); }
		public ITerminalNode NewLine(int i) {
			return GetToken(langParser.NewLine, i);
		}
		public Stop_statContext[] stop_stat() {
			return GetRuleContexts<Stop_statContext>();
		}
		public Stop_statContext stop_stat(int i) {
			return GetRuleContext<Stop_statContext>(i);
		}
		public Break_statContext[] break_stat() {
			return GetRuleContexts<Break_statContext>();
		}
		public Break_statContext break_stat(int i) {
			return GetRuleContext<Break_statContext>(i);
		}
		public Continue_statContext[] continue_stat() {
			return GetRuleContexts<Continue_statContext>();
		}
		public Continue_statContext continue_stat(int i) {
			return GetRuleContext<Continue_statContext>(i);
		}
		public Return_statContext[] return_stat() {
			return GetRuleContexts<Return_statContext>();
		}
		public Return_statContext return_stat(int i) {
			return GetRuleContext<Return_statContext>(i);
		}
		public ElsexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.EnterElsex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlangParserListener typedListener = listener as IlangParserListener;
			if (typedListener != null) typedListener.ExitElsex(this);
		}
	}

	[RuleVersion(0)]
	public ElsexContext elsex() {
		ElsexContext _localctx = new ElsexContext(Context, State);
		EnterRule(_localctx, 56, RULE_elsex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 598; Match(Else);
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 608;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						State = 599; line();
						}
						break;
					case 2:
						{
						{
						State = 604;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
						case 1:
							{
							State = 600; stop_stat();
							}
							break;
						case 2:
							{
							State = 601; break_stat();
							}
							break;
						case 3:
							{
							State = 602; continue_stat();
							}
							break;
						case 4:
							{
							State = 603; return_stat();
							}
							break;
						}
						State = 606;
						_la = TokenStream.LA(1);
						if ( !(_la==Dot_comma || _la==NewLine) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 613; last_expression_in_if();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 16: return function_dec_sempred((Function_decContext)_localctx, predIndex);
		case 22: return return_stat_sempred((Return_statContext)_localctx, predIndex);
		case 23: return stop_stat_sempred((Stop_statContext)_localctx, predIndex);
		case 24: return break_stat_sempred((Break_statContext)_localctx, predIndex);
		case 25: return continue_stat_sempred((Continue_statContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 59);
		case 1: return Precpred(Context, 58);
		case 2: return Precpred(Context, 57);
		case 3: return Precpred(Context, 56);
		case 4: return Precpred(Context, 55);
		case 5: return Precpred(Context, 54);
		case 6: return Precpred(Context, 53);
		case 7: return Precpred(Context, 52);
		case 8: return Precpred(Context, 51);
		case 9: return Precpred(Context, 63);
		case 10: return Precpred(Context, 40);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 10);
		case 16: return Precpred(Context, 9);
		case 17: return Precpred(Context, 8);
		case 18: return Precpred(Context, 7);
		case 19: return Precpred(Context, 6);
		case 20: return Precpred(Context, 5);
		case 21: return Precpred(Context, 2);
		}
		return true;
	}
	private bool function_dec_sempred(Function_decContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return function_nested_level>0;
		case 23: return function_nested_level>0;
		}
		return true;
	}
	private bool return_stat_sempred(Return_statContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return function_nested_level>0;
		}
		return true;
	}
	private bool stop_stat_sempred(Stop_statContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return  Convert.ToBoolean(this.stack_of_while.Count);
		}
		return true;
	}
	private bool break_stat_sempred(Break_statContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return  Convert.ToBoolean(this.stack_of_if.Count);
		}
		return true;
	}
	private bool continue_stat_sempred(Continue_statContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return  Convert.ToBoolean(this.stack_of_while.Count);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x26B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\a', '\x2', '>', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x41', '\v', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x44', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x5', '\x3', 'I', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'M', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xBA', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xBF', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\xE9', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\x111', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x114', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x119', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x11D', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x121', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x127', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x12B', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x130', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x136', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x13E', '\n', '\t', '\a', '\t', '\x140', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x143', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x14C', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x154', '\n', '\n', 
		'\a', '\n', '\x156', '\n', '\n', '\f', '\n', '\xE', '\n', '\x159', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x15D', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x162', '\n', '\v', '\a', 
		'\v', '\x164', '\n', '\v', '\f', '\v', '\xE', '\v', '\x167', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x16F', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x177', '\n', 
		'\f', '\a', '\f', '\x179', '\n', '\f', '\f', '\f', '\xE', '\f', '\x17C', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x180', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x18C', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x194', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x197', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x19C', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x1A3', '\n', '\x12', '\a', '\x12', '\x1A5', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x1A8', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\x1B0', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x1B3', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1B8', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1BD', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x1C2', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x1C7', '\n', '\x13', '\x5', '\x13', '\x1C9', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x1D0', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x1D5', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1D8', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1E0', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x1E4', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x1E7', '\v', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1EA', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x1EF', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x1F6', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x1FA', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x1FD', '\v', '\x17', '\x3', '\x17', '\x5', '\x17', '\x200', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x205', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x20B', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x211', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x219', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x222', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x229', '\n', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x22C', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x234', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\x238', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x23B', '\v', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x23E', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x243', '\n', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x246', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x24D', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x251', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x254', '\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x257', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x25F', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x263', '\n', '\x1E', '\f', 
		'\x1E', '\xE', '\x1E', '\x266', '\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x269', '\n', '\x1E', '\x3', '\x1E', '\x2', '\x3', '\n', '\x1F', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '\x2', '\x5', '\x4', '\x2', 
		'$', '$', '\x31', '\x31', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'.', '.', '\x2', '\x2E9', '\x2', '?', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x6', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'R', '\x3', '\x2', '\x2', '\x2', '\n', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x115', '\x3', '\x2', '\x2', '\x2', '\xE', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x191', '\x3', '\x2', '\x2', '\x2', '\"', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x1BE', '\x3', '\x2', '\x2', '\x2', '&', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1F5', '\x3', '\x2', '\x2', '\x2', ',', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x206', '\x3', '\x2', '\x2', '\x2', '\x30', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x225', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x23F', '\x3', '\x2', '\x2', '\x2', ':', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\x4', '\x3', '\x2', '=', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x44', '\x5', '\n', '\x6', '\x2', '\x43', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x2', '\x2', 
		'\x3', '\x46', '\x3', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x5', '\n', 
		'\x6', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\b', '\x3', 
		'\x1', '\x2', 'K', 'M', '\x5', '\n', '\x6', '\x2', 'L', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\t', '\x2', '\x2', '\x2', 'O', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\n', '\x6', '\x2', 'Q', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\x5', '\n', '\x6', '\x2', 'S', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\b', '\x6', '\x1', '\x2', 'U', 'V', '\a', 
		'!', '\x2', '\x2', 'V', 'W', '\x5', '\n', '\x6', '\x2', 'W', 'X', '\a', 
		'\"', '\x2', '\x2', 'X', '\xBF', '\x3', '\x2', '\x2', '\x2', 'Y', '\xBF', 
		'\x5', '\x10', '\t', '\x2', 'Z', '\xBF', '\x5', '\"', '\x12', '\x2', '[', 
		'\xBF', '\x5', '$', '\x13', '\x2', '\\', '\xBF', '\x5', '\x12', '\n', 
		'\x2', ']', '\xBF', '\x5', ',', '\x17', '\x2', '^', '\xBF', '\x5', '(', 
		'\x15', '\x2', '_', '`', '\a', '\x19', '\x2', '\x2', '`', '\xBF', '\x5', 
		'\n', '\x6', '@', '\x61', '\x62', '\a', '\x10', '\x2', '\x2', '\x62', 
		'\xBF', '\x5', '\n', '\x6', '?', '\x63', '\x64', '\a', '\x12', '\x2', 
		'\x2', '\x64', '\xBF', '\x5', '\n', '\x6', '>', '\x65', '\x66', '\a', 
		'.', '\x2', '\x2', '\x66', 'g', '\a', '\x1B', '\x2', '\x2', 'g', '\xBF', 
		'\x5', '\n', '\x6', '\x34', 'h', '\xBF', '\x5', '\x18', '\r', '\x2', 'i', 
		'\xBF', '\x5', '\x1A', '\xE', '\x2', 'j', '\xBF', '\x5', '\x14', '\v', 
		'\x2', 'k', '\xBF', '\x5', '\x16', '\f', '\x2', 'l', '\xBF', '\x5', ' ', 
		'\x11', '\x2', 'm', '\xBF', '\x5', '\x1C', '\xF', '\x2', 'n', '\xBF', 
		'\x5', '\x1E', '\x10', '\x2', 'o', '\xBF', '\a', '.', '\x2', '\x2', 'p', 
		'q', '\a', '!', '\x2', '\x2', 'q', 'r', '\x5', '\n', '\x6', '+', 'r', 
		's', '\b', '\x6', '\x1', '\x2', 's', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '\x19', '\x2', '\x2', 'u', '\xBF', '\b', '\x6', '\x1', 
		'\x2', 'v', 'w', '\a', '\x10', '\x2', '\x2', 'w', '\xBF', '\b', '\x6', 
		'\x1', '\x2', 'x', 'y', '\a', '\x12', '\x2', '\x2', 'y', '\xBF', '\b', 
		'\x6', '\x1', '\x2', 'z', '{', '\a', '\x1A', '\x2', '\x2', '{', '|', '\b', 
		'\x6', '\x1', '\x2', '|', '\xBF', '\x5', '\n', '\x6', '&', '}', '~', '\a', 
		'\x1A', '\x2', '\x2', '~', '\xBF', '\b', '\x6', '\x1', '\x2', '\x7F', 
		'\x80', '\a', '\x1C', '\x2', '\x2', '\x80', '\x81', '\b', '\x6', '\x1', 
		'\x2', '\x81', '\xBF', '\x5', '\n', '\x6', '$', '\x82', '\x83', '\a', 
		'\x1C', '\x2', '\x2', '\x83', '\xBF', '\b', '\x6', '\x1', '\x2', '\x84', 
		'\x85', '\a', '\x19', '\x2', '\x2', '\x85', '\x86', '\b', '\x6', '\x1', 
		'\x2', '\x86', '\xBF', '\x5', '\n', '\x6', '\"', '\x87', '\x88', '\a', 
		'\x19', '\x2', '\x2', '\x88', '\xBF', '\b', '\x6', '\x1', '\x2', '\x89', 
		'\x8A', '\a', '\x16', '\x2', '\x2', '\x8A', '\x8B', '\b', '\x6', '\x1', 
		'\x2', '\x8B', '\xBF', '\x5', '\n', '\x6', ' ', '\x8C', '\x8D', '\a', 
		'\x16', '\x2', '\x2', '\x8D', '\xBF', '\b', '\x6', '\x1', '\x2', '\x8E', 
		'\x8F', '\a', '\x17', '\x2', '\x2', '\x8F', '\x90', '\b', '\x6', '\x1', 
		'\x2', '\x90', '\xBF', '\x5', '\n', '\x6', '\x1E', '\x91', '\x92', '\a', 
		'\x17', '\x2', '\x2', '\x92', '\xBF', '\b', '\x6', '\x1', '\x2', '\x93', 
		'\x94', '\a', '\x18', '\x2', '\x2', '\x94', '\x95', '\b', '\x6', '\x1', 
		'\x2', '\x95', '\xBF', '\x5', '\n', '\x6', '\x1C', '\x96', '\x97', '\a', 
		'\x18', '\x2', '\x2', '\x97', '\xBF', '\b', '\x6', '\x1', '\x2', '\x98', 
		'\x99', '\a', '\x19', '\x2', '\x2', '\x99', '\x9A', '\b', '\x6', '\x1', 
		'\x2', '\x9A', '\xBF', '\x5', '\n', '\x6', '\x1A', '\x9B', '\x9C', '\a', 
		'\x19', '\x2', '\x2', '\x9C', '\xBF', '\b', '\x6', '\x1', '\x2', '\x9D', 
		'\x9E', '\t', '\x3', '\x2', '\x2', '\x9E', '\x9F', '\b', '\x6', '\x1', 
		'\x2', '\x9F', '\xBF', '\x5', '\n', '\x6', '\x18', '\xA0', '\xA1', '\t', 
		'\x3', '\x2', '\x2', '\xA1', '\xBF', '\b', '\x6', '\x1', '\x2', '\xA2', 
		'\xA3', '\a', '\x11', '\x2', '\x2', '\xA3', '\xA4', '\b', '\x6', '\x1', 
		'\x2', '\xA4', '\xBF', '\x5', '\n', '\x6', '\x16', '\xA5', '\xA6', '\a', 
		'\x11', '\x2', '\x2', '\xA6', '\xBF', '\b', '\x6', '\x1', '\x2', '\xA7', 
		'\xA8', '\a', '\x19', '\x2', '\x2', '\xA8', '\xA9', '\b', '\x6', '\x1', 
		'\x2', '\xA9', '\xBF', '\x5', '\n', '\x6', '\x14', '\xAA', '\xAB', '\a', 
		'\x19', '\x2', '\x2', '\xAB', '\xBF', '\b', '\x6', '\x1', '\x2', '\xAC', 
		'\xAD', '\a', '.', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1B', '\x2', 
		'\x2', '\xAE', '\xBF', '\b', '\x6', '\x1', '\x2', '\xAF', '\xB0', '\a', 
		'\x15', '\x2', '\x2', '\xB0', '\xB1', '\b', '\x6', '\x1', '\x2', '\xB1', 
		'\xBF', '\x5', '\n', '\x6', '\xF', '\xB2', '\xB3', '\a', '\x1B', '\x2', 
		'\x2', '\xB3', '\xB4', '\x5', '\n', '\x6', '\x6', '\xB4', '\xB5', '\b', 
		'\x6', '\x1', '\x2', '\xB5', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\n', '\x4', '\x2', '\x2', '\xB7', '\xB9', '\a', '\x1B', '\x2', 
		'\x2', '\xB8', '\xBA', '\x5', '\n', '\x6', '\x2', '\xB9', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBF', '\b', '\x6', '\x1', 
		'\x2', '\xBC', '\xBD', '\a', '%', '\x2', '\x2', '\xBD', '\xBF', '\b', 
		'\x6', '\x1', '\x2', '\xBE', 'T', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\xBE', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '[', '\x3', '\x2', '\x2', '\x2', '\xBE', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', ']', '\x3', '\x2', '\x2', '\x2', '\xBE', '^', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '_', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x65', '\x3', '\x2', '\x2', '\x2', '\xBE', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', 'i', '\x3', '\x2', '\x2', '\x2', '\xBE', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', 'k', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'l', '\x3', '\x2', '\x2', '\x2', '\xBE', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', 'n', '\x3', '\x2', '\x2', '\x2', '\xBE', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', 'p', '\x3', '\x2', '\x2', '\x2', '\xBE', 't', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', 'v', '\x3', '\x2', '\x2', '\x2', '\xBE', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', 'z', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'}', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\x82', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\x87', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\x93', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x112', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\f', '=', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x1A', '\x2', 
		'\x2', '\xC2', '\x111', '\x5', '\n', '\x6', '>', '\xC3', '\xC4', '\f', 
		'<', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1C', '\x2', '\x2', '\xC5', 
		'\x111', '\x5', '\n', '\x6', '=', '\xC6', '\xC7', '\f', ';', '\x2', '\x2', 
		'\xC7', '\xC8', '\a', '\x19', '\x2', '\x2', '\xC8', '\x111', '\x5', '\n', 
		'\x6', '<', '\xC9', '\xCA', '\f', ':', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		'\x16', '\x2', '\x2', '\xCB', '\x111', '\x5', '\n', '\x6', ';', '\xCC', 
		'\xCD', '\f', '\x39', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x17', '\x2', 
		'\x2', '\xCE', '\x111', '\x5', '\n', '\x6', ':', '\xCF', '\xD0', '\f', 
		'\x38', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x18', '\x2', '\x2', '\xD1', 
		'\x111', '\x5', '\n', '\x6', '\x39', '\xD2', '\xD3', '\f', '\x37', '\x2', 
		'\x2', '\xD3', '\xD4', '\t', '\x3', '\x2', '\x2', '\xD4', '\x111', '\x5', 
		'\n', '\x6', '\x38', '\xD5', '\xD6', '\f', '\x36', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\x11', '\x2', '\x2', '\xD7', '\x111', '\x5', '\n', '\x6', 
		'\x37', '\xD8', '\xD9', '\f', '\x35', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\x1D', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\n', '\x6', '\x2', '\xDB', 
		'\xDC', '\a', '\x1E', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', 
		'\x2', '\xDD', '\xDE', '\x5', '\n', '\x6', '\x36', '\xDE', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\f', '\x41', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x1D', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\n', '\x6', 
		'\x2', '\xE2', '\xE3', '\a', '\x1E', '\x2', '\x2', '\xE3', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\f', '*', '\x2', '\x2', '\xE5', 
		'\xE8', '\a', '\x1D', '\x2', '\x2', '\xE6', '\xE9', '\x5', '\n', '\x6', 
		'\x2', '\xE7', '\xE9', '\b', '\x6', '\x1', '\x2', '\xE8', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x111', '\b', '\x6', '\x1', 
		'\x2', '\xEB', '\xEC', '\f', '\x12', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'\x1D', '\x2', '\x2', '\xED', '\xEE', '\x5', '\n', '\x6', '\x2', '\xEE', 
		'\xEF', '\a', '\x1E', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x1B', '\x2', 
		'\x2', '\xF0', '\xF1', '\b', '\x6', '\x1', '\x2', '\xF1', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\f', '\x10', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x15', '\x2', '\x2', '\xF4', '\x111', '\b', '\x6', '\x1', 
		'\x2', '\xF5', '\xF6', '\f', '\xE', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\x1A', '\x2', '\x2', '\xF7', '\x111', '\b', '\x6', '\x1', '\x2', '\xF8', 
		'\xF9', '\f', '\r', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x1C', '\x2', 
		'\x2', '\xFA', '\x111', '\b', '\x6', '\x1', '\x2', '\xFB', '\xFC', '\f', 
		'\f', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x19', '\x2', '\x2', '\xFD', 
		'\x111', '\b', '\x6', '\x1', '\x2', '\xFE', '\xFF', '\f', '\v', '\x2', 
		'\x2', '\xFF', '\x100', '\a', '\x16', '\x2', '\x2', '\x100', '\x111', 
		'\b', '\x6', '\x1', '\x2', '\x101', '\x102', '\f', '\n', '\x2', '\x2', 
		'\x102', '\x103', '\a', '\x17', '\x2', '\x2', '\x103', '\x111', '\b', 
		'\x6', '\x1', '\x2', '\x104', '\x105', '\f', '\t', '\x2', '\x2', '\x105', 
		'\x106', '\a', '\x18', '\x2', '\x2', '\x106', '\x111', '\b', '\x6', '\x1', 
		'\x2', '\x107', '\x108', '\f', '\b', '\x2', '\x2', '\x108', '\x109', '\t', 
		'\x3', '\x2', '\x2', '\x109', '\x111', '\b', '\x6', '\x1', '\x2', '\x10A', 
		'\x10B', '\f', '\a', '\x2', '\x2', '\x10B', '\x10C', '\a', '\x11', '\x2', 
		'\x2', '\x10C', '\x111', '\b', '\x6', '\x1', '\x2', '\x10D', '\x10E', 
		'\f', '\x4', '\x2', '\x2', '\x10E', '\x10F', '\a', '%', '\x2', '\x2', 
		'\x10F', '\x111', '\b', '\x6', '\x1', '\x2', '\x110', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x110', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x110', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x110', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x110', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x110', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x110', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x110', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x107', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x118', '\a', '.', '\x2', '\x2', '\x116', '\x119', '\a', '\x15', '\x2', 
		'\x2', '\x117', '\x119', '\b', '\a', '\x1', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', '\x5', '\n', '\x6', 
		'\x2', '\x11B', '\x11D', '\b', '\a', '\x1', '\x2', '\x11C', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', '\a', '.', '\x2', 
		'\x2', '\x11F', '\x121', '\x5', '\x14', '\v', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', 
		'%', '\x2', '\x2', '\x123', '\x12B', '\a', '.', '\x2', '\x2', '\x124', 
		'\x127', '\a', '.', '\x2', '\x2', '\x125', '\x127', '\x5', '\x14', '\v', 
		'\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\a', '%', '\x2', '\x2', '\x129', '\x12B', '\b', '\b', 
		'\x1', '\x2', '\x12A', '\x120', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x130', '\x5', '\xE', '\b', '\x2', '\x12D', '\x130', '\a', '.', 
		'\x2', '\x2', '\x12E', '\x130', '\x5', '\"', '\x12', '\x2', '\x12F', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x135', '\a', '!', '\x2', '\x2', '\x132', 
		'\x133', '\x5', '\n', '\x6', '\x2', '\x133', '\x134', '\b', '\t', '\x1', 
		'\x2', '\x134', '\x136', '\x3', '\x2', '\x2', '\x2', '\x135', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x141', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', 
		'#', '\x2', '\x2', '\x138', '\x13D', '\b', '\t', '\x1', '\x2', '\x139', 
		'\x13A', '\x5', '\n', '\x6', '\x2', '\x13A', '\x13B', '\b', '\t', '\x1', 
		'\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', 
		'\b', '\t', '\x1', '\x2', '\x13D', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x137', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\a', '\"', '\x2', '\x2', '\x145', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x146', '\x14B', '\a', '\x3', '\x2', '\x2', '\x147', '\x148', 
		'\x5', '\n', '\x6', '\x2', '\x148', '\x149', '\b', '\n', '\x1', '\x2', 
		'\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', '\b', 
		'\n', '\x1', '\x2', '\x14B', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14E', '\a', '#', '\x2', '\x2', '\x14E', '\x153', '\b', 
		'\n', '\x1', '\x2', '\x14F', '\x150', '\x5', '\n', '\x6', '\x2', '\x150', 
		'\x151', '\b', '\n', '\x1', '\x2', '\x151', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x154', '\b', '\n', '\x1', '\x2', '\x153', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x155', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', '\x157', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x13', '\x3', '\x2', '\x2', '\x2', '\x159', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '\x1F', '\x2', '\x2', '\x15B', 
		'\x15D', '\x5', '\f', '\a', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', '\a', '#', '\x2', '\x2', 
		'\x15F', '\x162', '\x5', '\f', '\a', '\x2', '\x160', '\x162', '\b', '\v', 
		'\x1', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x161', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\a', ' ', '\x2', '\x2', '\x169', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16E', '\a', '\x1D', '\x2', '\x2', '\x16B', '\x16C', '\x5', 
		'\b', '\x5', '\x2', '\x16C', '\x16D', '\b', '\f', '\x1', '\x2', '\x16D', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\a', '#', '\x2', '\x2', 
		'\x171', '\x176', '\b', '\f', '\x1', '\x2', '\x172', '\x173', '\x5', '\b', 
		'\x5', '\x2', '\x173', '\x174', '\b', '\f', '\x1', '\x2', '\x174', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x177', '\b', '\f', '\x1', '\x2', 
		'\x176', '\x172', '\x3', '\x2', '\x2', '\x2', '\x176', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x179', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\a', 
		'\x1E', '\x2', '\x2', '\x17E', '\x180', '\b', '\f', '\x1', '\x2', '\x17F', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x17', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\a', '\'', '\x2', '\x2', '\x182', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\a', '(', '\x2', '\x2', '\x184', '\x18C', '\b', '\xE', 
		'\x1', '\x2', '\x185', '\x186', '\a', ')', '\x2', '\x2', '\x186', '\x18C', 
		'\b', '\xE', '\x1', '\x2', '\x187', '\x188', '\a', '*', '\x2', '\x2', 
		'\x188', '\x18C', '\b', '\xE', '\x1', '\x2', '\x189', '\x18A', '\a', '+', 
		'\x2', '\x2', '\x18A', '\x18C', '\b', '\xE', '\x1', '\x2', '\x18B', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\a', ',', '\x2', '\x2', '\x18E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\a', '-', '\x2', '\x2', '\x190', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x195', '\a', '&', '\x2', '\x2', '\x192', 
		'\x194', '\a', '&', '\x2', '\x2', '\x193', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x197', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '!', '\x3', '\x2', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x19B', '\a', '\b', '\x2', '\x2', '\x199', '\x19A', 
		'\a', '.', '\x2', '\x2', '\x19A', '\x19C', '\b', '\x12', '\x1', '\x2', 
		'\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19E', '\a', '#', '\x2', '\x2', '\x19E', '\x1A2', '\b', '\x12', '\x1', 
		'\x2', '\x19F', '\x1A0', '\a', '.', '\x2', '\x2', '\x1A0', '\x1A3', '\b', 
		'\x12', '\x1', '\x2', '\x1A1', '\x1A3', '\b', '\x12', '\x1', '\x2', '\x1A2', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1B1', '\b', '\x12', '\x1', 
		'\x2', '\x1AA', '\x1B0', '\x5', '\x4', '\x3', '\x2', '\x1AB', '\x1AC', 
		'\x6', '\x12', '\x18', '\x2', '\x1AC', '\x1AD', '\x5', '.', '\x18', '\x2', 
		'\x1AD', '\x1AE', '\t', '\x2', '\x2', '\x2', '\x1AE', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B8', '\x5', 
		'\n', '\x6', '\x2', '\x1B5', '\x1B6', '\x6', '\x12', '\x19', '\x2', '\x1B6', 
		'\x1B8', '\x5', '.', '\x18', '\x2', '\x1B7', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\a', '\t', '\x2', '\x2', '\x1BA', '\x1BD', '\b', '\x12', 
		'\x1', '\x2', '\x1BB', '\x1BD', '\b', '\x12', '\x1', '\x2', '\x1BC', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '#', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', '\a', '\a', 
		'\x2', '\x2', '\x1BF', '\x1C2', '\a', '.', '\x2', '\x2', '\x1C0', '\x1C2', 
		'\b', '\x13', '\x1', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\a', '\x1B', '\x2', '\x2', '\x1C4', 
		'\x1C7', '\x5', '\n', '\x6', '\x2', '\x1C5', '\x1C7', '\b', '\x13', '\x1', 
		'\x2', '\x1C6', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '%', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1D0', '\x5', '\n', '\x6', '\x2', '\x1CB', '\x1D0', '\x5', '\x30', '\x19', 
		'\x2', '\x1CC', '\x1D0', '\x5', '\x32', '\x1A', '\x2', '\x1CD', '\x1D0', 
		'\x5', '\x34', '\x1B', '\x2', '\x1CE', '\x1D0', '\x5', '.', '\x18', '\x2', 
		'\x1CF', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\'', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D4', '\a', 
		'\n', '\x2', '\x2', '\x1D2', '\x1D5', '\x5', '\x6', '\x4', '\x2', '\x1D3', 
		'\x1D5', '\b', '\x15', '\x1', '\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D8', '\a', '\x31', '\x2', '\x2', 
		'\x1D7', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1E5', '\b', '\x15', '\x1', '\x2', '\x1DA', '\x1E4', '\x5', '\x4', '\x3', 
		'\x2', '\x1DB', '\x1E0', '\x5', '\x30', '\x19', '\x2', '\x1DC', '\x1E0', 
		'\x5', '\x32', '\x1A', '\x2', '\x1DD', '\x1E0', '\x5', '\x34', '\x1B', 
		'\x2', '\x1DE', '\x1E0', '\x5', '.', '\x18', '\x2', '\x1DF', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\t', '\x2', '\x2', '\x2', '\x1E2', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', '&', '\x14', 
		'\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EC', '\a', '\v', '\x2', '\x2', '\x1EC', '\x1EF', '\b', '\x15', 
		'\x1', '\x2', '\x1ED', '\x1EF', '\b', '\x15', '\x1', '\x2', '\x1EE', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', ')', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F6', '\x5', '\n', 
		'\x6', '\x2', '\x1F1', '\x1F6', '\x5', '\x30', '\x19', '\x2', '\x1F2', 
		'\x1F6', '\x5', '\x32', '\x1A', '\x2', '\x1F3', '\x1F6', '\x5', '\x34', 
		'\x1B', '\x2', '\x1F4', '\x1F6', '\x5', '.', '\x18', '\x2', '\x1F5', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FB', '\x5', '\x36', '\x1C', 
		'\x2', '\x1F8', '\x1FA', '\x5', '\x38', '\x1D', '\x2', '\x1F9', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FD', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x200', '\x5', ':', '\x1E', 
		'\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x204', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x202', '\a', '\t', '\x2', '\x2', '\x202', '\x205', '\b', '\x17', 
		'\x1', '\x2', '\x203', '\x205', '\b', '\x17', '\x1', '\x2', '\x204', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '-', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x6', '\x18', 
		'\x1A', '\x2', '\x207', '\x20A', '\a', '\xF', '\x2', '\x2', '\x208', '\x20B', 
		'\x5', '\n', '\x6', '\x2', '\x209', '\x20B', '\b', '\x18', '\x1', '\x2', 
		'\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '/', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20D', '\x6', '\x19', '\x1B', '\x2', '\x20D', '\x210', '\a', '\r', '\x2', 
		'\x2', '\x20E', '\x211', '\x5', '\n', '\x6', '\x2', '\x20F', '\x211', 
		'\b', '\x19', '\x1', '\x2', '\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x213', '\b', '\x19', '\x1', '\x2', '\x213', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\x6', '\x1A', '\x1C', 
		'\x2', '\x215', '\x218', '\a', '\xE', '\x2', '\x2', '\x216', '\x219', 
		'\x5', '\n', '\x6', '\x2', '\x217', '\x219', '\b', '\x1A', '\x1', '\x2', 
		'\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x21B', '\b', '\x1A', '\x1', '\x2', '\x21B', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21D', '\x6', '\x1B', '\x1D', '\x2', '\x21D', '\x221', 
		'\a', '\f', '\x2', '\x2', '\x21E', '\x21F', '\x5', '\n', '\x6', '\x2', 
		'\x21F', '\x220', '\b', '\x1B', '\x1', '\x2', '\x220', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x222', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x224', '\b', '\x1B', '\x1', '\x2', '\x224', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x228', '\a', '\x4', '\x2', '\x2', 
		'\x226', '\x229', '\x5', '\x6', '\x4', '\x2', '\x227', '\x229', '\b', 
		'\x1C', '\x1', '\x2', '\x228', '\x226', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22C', '\a', '\x31', '\x2', '\x2', '\x22B', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x239', '\b', 
		'\x1C', '\x1', '\x2', '\x22E', '\x238', '\x5', '\x4', '\x3', '\x2', '\x22F', 
		'\x234', '\x5', '\x30', '\x19', '\x2', '\x230', '\x234', '\x5', '\x32', 
		'\x1A', '\x2', '\x231', '\x234', '\x5', '\x34', '\x1B', '\x2', '\x232', 
		'\x234', '\x5', '.', '\x18', '\x2', '\x233', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x233', '\x230', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', '\x236', '\t', 
		'\x2', '\x2', '\x2', '\x236', '\x238', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x237', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x239', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x23C', '\x23E', '\x5', '*', '\x16', '\x2', '\x23D', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x242', 
		'\a', '\x5', '\x2', '\x2', '\x240', '\x243', '\x5', '\x6', '\x4', '\x2', 
		'\x241', '\x243', '\b', '\x1D', '\x1', '\x2', '\x242', '\x240', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x241', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x244', '\x246', '\a', '\x31', '\x2', 
		'\x2', '\x245', '\x244', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x251', '\x5', '\x4', '\x3', '\x2', '\x248', '\x24D', '\x5', 
		'\x30', '\x19', '\x2', '\x249', '\x24D', '\x5', '\x32', '\x1A', '\x2', 
		'\x24A', '\x24D', '\x5', '\x34', '\x1B', '\x2', '\x24B', '\x24D', '\x5', 
		'.', '\x18', '\x2', '\x24C', '\x248', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\t', '\x2', '\x2', '\x2', 
		'\x24F', '\x251', '\x3', '\x2', '\x2', '\x2', '\x250', '\x247', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x252', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x253', '\x3', '\x2', '\x2', '\x2', '\x253', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x257', '\x5', '*', '\x16', '\x2', '\x256', '\x255', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x258', '\x264', '\a', '\x6', '\x2', 
		'\x2', '\x259', '\x263', '\x5', '\x4', '\x3', '\x2', '\x25A', '\x25F', 
		'\x5', '\x30', '\x19', '\x2', '\x25B', '\x25F', '\x5', '\x32', '\x1A', 
		'\x2', '\x25C', '\x25F', '\x5', '\x34', '\x1B', '\x2', '\x25D', '\x25F', 
		'\x5', '.', '\x18', '\x2', '\x25E', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\t', '\x2', '\x2', 
		'\x2', '\x261', '\x263', '\x3', '\x2', '\x2', '\x2', '\x262', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x262', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x266', '\x3', '\x2', '\x2', '\x2', '\x264', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x267', '\x269', '\x5', '*', '\x16', '\x2', '\x268', '\x267', 
		'\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x269', ';', '\x3', '\x2', '\x2', '\x2', 'J', '?', '\x43', 'H', 'L', 
		'\xB9', '\xBE', '\xE8', '\x110', '\x112', '\x118', '\x11C', '\x120', '\x126', 
		'\x12A', '\x12F', '\x135', '\x13D', '\x141', '\x14B', '\x153', '\x157', 
		'\x15C', '\x161', '\x165', '\x16E', '\x176', '\x17A', '\x17F', '\x18B', 
		'\x195', '\x19B', '\x1A2', '\x1A6', '\x1AF', '\x1B1', '\x1B7', '\x1BC', 
		'\x1C1', '\x1C6', '\x1C8', '\x1CF', '\x1D4', '\x1D7', '\x1DF', '\x1E3', 
		'\x1E5', '\x1E9', '\x1EE', '\x1F5', '\x1FB', '\x1FF', '\x204', '\x20A', 
		'\x210', '\x218', '\x221', '\x228', '\x22B', '\x233', '\x237', '\x239', 
		'\x23D', '\x242', '\x245', '\x24C', '\x250', '\x252', '\x256', '\x25E', 
		'\x262', '\x264', '\x268',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
