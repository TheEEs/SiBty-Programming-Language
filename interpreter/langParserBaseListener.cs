//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from langParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Planguage;
using Planguage.Errors;
using System.Collections.Generic;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IlangParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class langParserBaseListener : IlangParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] langParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] langParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] langParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] langParser.LineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.exps"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExps([NotNull] langParser.ExpsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.exps"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExps([NotNull] langParser.ExpsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.array_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_element([NotNull] langParser.Array_elementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.array_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_element([NotNull] langParser.Array_elementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pos_neg</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPos_neg([NotNull] langParser.Pos_negContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pos_neg</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPos_neg([NotNull] langParser.Pos_negContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignments</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignments([NotNull] langParser.AssignmentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignments</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignments([NotNull] langParser.AssignmentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwise_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwise_not([NotNull] langParser.Bitwise_notContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwise_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwise_not([NotNull] langParser.Bitwise_notContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>error_missing_expression_or_close_pathen_member_access</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterError_missing_expression_or_close_pathen_member_access([NotNull] langParser.Error_missing_expression_or_close_pathen_member_accessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>error_missing_expression_or_close_pathen_member_access</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitError_missing_expression_or_close_pathen_member_access([NotNull] langParser.Error_missing_expression_or_close_pathen_member_accessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_op([NotNull] langParser.Missing_exp_before_opContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_op([NotNull] langParser.Missing_exp_before_opContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>member_accesses</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_accesses([NotNull] langParser.Member_accessesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>member_accesses</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_accesses([NotNull] langParser.Member_accessesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_rela([NotNull] langParser.Missing_exp_after_relaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_rela([NotNull] langParser.Missing_exp_after_relaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_hash_pair</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_hash_pair([NotNull] langParser.Missing_exp_before_hash_pairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_hash_pair</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_hash_pair([NotNull] langParser.Missing_exp_before_hash_pairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwise_shift</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwise_shift([NotNull] langParser.Bitwise_shiftContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwise_shift</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwise_shift([NotNull] langParser.Bitwise_shiftContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_mul([NotNull] langParser.Unexpected_token_mulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_mul([NotNull] langParser.Unexpected_token_mulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_op([NotNull] langParser.Missing_exp_after_opContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_op([NotNull] langParser.Missing_exp_after_opContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>function_in_pathens</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_in_pathens([NotNull] langParser.Function_in_pathensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>function_in_pathens</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_in_pathens([NotNull] langParser.Function_in_pathensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_mul([NotNull] langParser.Missing_exp_before_mulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_mul([NotNull] langParser.Missing_exp_before_mulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_bsh</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_bsh([NotNull] langParser.Missing_exp_after_bshContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_bsh</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_bsh([NotNull] langParser.Missing_exp_after_bshContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolean_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean_not([NotNull] langParser.Boolean_notContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolean_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean_not([NotNull] langParser.Boolean_notContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_boolean_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_boolean_not([NotNull] langParser.Missing_exp_boolean_notContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_boolean_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_boolean_not([NotNull] langParser.Missing_exp_boolean_notContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>while_statement</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile_statement([NotNull] langParser.While_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>while_statement</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile_statement([NotNull] langParser.While_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>nums</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNums([NotNull] langParser.NumsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nums</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNums([NotNull] langParser.NumsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_bs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_bs([NotNull] langParser.Unexpected_token_bsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_bs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_bs([NotNull] langParser.Unexpected_token_bsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>member_settings</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_settings([NotNull] langParser.Member_settingsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>member_settings</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_settings([NotNull] langParser.Member_settingsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_eq([NotNull] langParser.Missing_exp_after_eqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_eq([NotNull] langParser.Missing_exp_after_eqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_mul([NotNull] langParser.Missing_exp_after_mulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_mul</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_mul([NotNull] langParser.Missing_exp_after_mulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_additive</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_additive([NotNull] langParser.Missing_exp_additiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_additive</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_additive([NotNull] langParser.Missing_exp_additiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>out_of_hash_pair</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOut_of_hash_pair([NotNull] langParser.Out_of_hash_pairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>out_of_hash_pair</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOut_of_hash_pair([NotNull] langParser.Out_of_hash_pairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_bop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_bop([NotNull] langParser.Missing_exp_after_bopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_bop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_bop([NotNull] langParser.Missing_exp_after_bopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fn_call</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFn_call([NotNull] langParser.Fn_callContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fn_call</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFn_call([NotNull] langParser.Fn_callContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_ad</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_ad([NotNull] langParser.Missing_exp_after_adContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_ad</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_ad([NotNull] langParser.Missing_exp_after_adContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>misssing_expression_after_member_setting</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMisssing_expression_after_member_setting([NotNull] langParser.Misssing_expression_after_member_settingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>misssing_expression_after_member_setting</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMisssing_expression_after_member_setting([NotNull] langParser.Misssing_expression_after_member_settingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloat([NotNull] langParser.FloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloat([NotNull] langParser.FloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>nils</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNils([NotNull] langParser.NilsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nils</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNils([NotNull] langParser.NilsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_op([NotNull] langParser.Unexpected_token_opContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_op</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_op([NotNull] langParser.Unexpected_token_opContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>additives</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditives([NotNull] langParser.AdditivesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additives</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditives([NotNull] langParser.AdditivesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>misssing_expression_after_assignment</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMisssing_expression_after_assignment([NotNull] langParser.Misssing_expression_after_assignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>misssing_expression_after_assignment</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMisssing_expression_after_assignment([NotNull] langParser.Misssing_expression_after_assignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>arrays</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrays([NotNull] langParser.ArraysContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>arrays</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrays([NotNull] langParser.ArraysContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_bs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_bs([NotNull] langParser.Missing_exp_before_bsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_bs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_bs([NotNull] langParser.Missing_exp_before_bsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_as</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_as([NotNull] langParser.Missing_exp_after_asContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_as</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_as([NotNull] langParser.Missing_exp_after_asContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_bitwise_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_bitwise_not([NotNull] langParser.Missing_exp_bitwise_notContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_bitwise_not</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_bitwise_not([NotNull] langParser.Missing_exp_bitwise_notContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwise_operators</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwise_operators([NotNull] langParser.Bitwise_operatorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwise_operators</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwise_operators([NotNull] langParser.Bitwise_operatorsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_eq([NotNull] langParser.Unexpected_token_eqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_eq([NotNull] langParser.Unexpected_token_eqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>hashs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashs([NotNull] langParser.HashsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>hashs</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashs([NotNull] langParser.HashsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_rela([NotNull] langParser.Missing_exp_before_relaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_rela([NotNull] langParser.Missing_exp_before_relaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exponents</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExponents([NotNull] langParser.ExponentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exponents</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExponents([NotNull] langParser.ExponentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_ass</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_ass([NotNull] langParser.Unexpected_token_assContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_ass</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_ass([NotNull] langParser.Unexpected_token_assContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variable_declerations</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable_declerations([NotNull] langParser.Variable_declerationsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variable_declerations</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable_declerations([NotNull] langParser.Variable_declerationsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>strings</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStrings([NotNull] langParser.StringsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>strings</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStrings([NotNull] langParser.StringsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>error_missing_close_pathen</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterError_missing_close_pathen([NotNull] langParser.Error_missing_close_pathenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>error_missing_close_pathen</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitError_missing_close_pathen([NotNull] langParser.Error_missing_close_pathenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>if_statements</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_statements([NotNull] langParser.If_statementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>if_statements</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_statements([NotNull] langParser.If_statementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_exponent</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_exponent([NotNull] langParser.Missing_exp_before_exponentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_exponent</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_exponent([NotNull] langParser.Missing_exp_before_exponentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_rela([NotNull] langParser.Unexpected_token_relaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_rela</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_rela([NotNull] langParser.Unexpected_token_relaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleans</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleans([NotNull] langParser.BooleansContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleans</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleans([NotNull] langParser.BooleansContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_eq([NotNull] langParser.Missing_exp_before_eqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_eq</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_eq([NotNull] langParser.Missing_exp_before_eqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_boolop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_boolop([NotNull] langParser.Unexpected_token_boolopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_boolop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_boolop([NotNull] langParser.Unexpected_token_boolopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>equalties</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualties([NotNull] langParser.EqualtiesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>equalties</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualties([NotNull] langParser.EqualtiesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dotx</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDotx([NotNull] langParser.DotxContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dotx</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDotx([NotNull] langParser.DotxContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolean_operators</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean_operators([NotNull] langParser.Boolean_operatorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolean_operators</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean_operators([NotNull] langParser.Boolean_operatorsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifiers</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifiers([NotNull] langParser.IdentifiersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifiers</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifiers([NotNull] langParser.IdentifiersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_boolop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_boolop([NotNull] langParser.Missing_exp_before_boolopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_boolop</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_boolop([NotNull] langParser.Missing_exp_before_boolopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_add</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_add([NotNull] langParser.Unexpected_token_addContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_add</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_add([NotNull] langParser.Unexpected_token_addContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>prints</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrints([NotNull] langParser.PrintsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>prints</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrints([NotNull] langParser.PrintsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_after_exp</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_after_exp([NotNull] langParser.Missing_exp_after_expContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_after_exp</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_after_exp([NotNull] langParser.Missing_exp_after_expContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>missing_exp_before_add</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMissing_exp_before_add([NotNull] langParser.Missing_exp_before_addContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>missing_exp_before_add</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMissing_exp_before_add([NotNull] langParser.Missing_exp_before_addContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplications</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplications([NotNull] langParser.MultiplicationsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplications</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplications([NotNull] langParser.MultiplicationsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>function_declerations</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_declerations([NotNull] langParser.Function_declerationsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>function_declerations</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_declerations([NotNull] langParser.Function_declerationsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>relationals</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationals([NotNull] langParser.RelationalsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>relationals</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationals([NotNull] langParser.RelationalsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unexpected_token_exponent</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnexpected_token_exponent([NotNull] langParser.Unexpected_token_exponentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unexpected_token_exponent</c>
	/// labeled alternative in <see cref="langParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnexpected_token_exponent([NotNull] langParser.Unexpected_token_exponentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.hash_key_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHash_key_value([NotNull] langParser.Hash_key_valueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.hash_key_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHash_key_value([NotNull] langParser.Hash_key_valueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.member_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_function([NotNull] langParser.Member_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.member_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_function([NotNull] langParser.Member_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.function_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_call([NotNull] langParser.Function_callContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.function_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_call([NotNull] langParser.Function_callContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrint([NotNull] langParser.PrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrint([NotNull] langParser.PrintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.hash"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHash([NotNull] langParser.HashContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.hash"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHash([NotNull] langParser.HashContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray([NotNull] langParser.ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray([NotNull] langParser.ArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.flt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFlt([NotNull] langParser.FltContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.flt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFlt([NotNull] langParser.FltContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] langParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] langParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.truefalse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTruefalse([NotNull] langParser.TruefalseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.truefalse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTruefalse([NotNull] langParser.TruefalseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.nil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNil([NotNull] langParser.NilContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.nil"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNil([NotNull] langParser.NilContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] langParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] langParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.function_dec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_dec([NotNull] langParser.Function_decContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.function_dec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_dec([NotNull] langParser.Function_decContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.variable_decleration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable_decleration([NotNull] langParser.Variable_declerationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.variable_decleration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable_decleration([NotNull] langParser.Variable_declerationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.last_expression_in_while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLast_expression_in_while([NotNull] langParser.Last_expression_in_whileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.last_expression_in_while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLast_expression_in_while([NotNull] langParser.Last_expression_in_whileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.while_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile_stat([NotNull] langParser.While_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.while_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile_stat([NotNull] langParser.While_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.last_expression_in_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLast_expression_in_if([NotNull] langParser.Last_expression_in_ifContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.last_expression_in_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLast_expression_in_if([NotNull] langParser.Last_expression_in_ifContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.if_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_stat([NotNull] langParser.If_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.if_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_stat([NotNull] langParser.If_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.return_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn_stat([NotNull] langParser.Return_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.return_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn_stat([NotNull] langParser.Return_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.stop_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStop_stat([NotNull] langParser.Stop_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.stop_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStop_stat([NotNull] langParser.Stop_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.break_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreak_stat([NotNull] langParser.Break_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.break_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreak_stat([NotNull] langParser.Break_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.continue_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinue_stat([NotNull] langParser.Continue_statContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.continue_stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinue_stat([NotNull] langParser.Continue_statContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.iif"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIif([NotNull] langParser.IifContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.iif"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIif([NotNull] langParser.IifContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.else_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElse_if([NotNull] langParser.Else_ifContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.else_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElse_if([NotNull] langParser.Else_ifContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="langParser.elsex"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElsex([NotNull] langParser.ElsexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="langParser.elsex"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElsex([NotNull] langParser.ElsexContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
